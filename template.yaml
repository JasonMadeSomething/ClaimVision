AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Parameters:
  Env:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - prod
    Description: 'Specify the environment: dev or prod'

Conditions:
  IsDev: !Equals [!Ref Env, "dev"]


Mappings:
  CognitoExports:
    dev:
      UserPoolId: CognitoUserPoolId-dev
    prod:
      UserPoolId: CognitoUserPoolId-prod

Globals:
  Function:
    Timeout: 10
    MemorySize: 128
    Runtime: python3.12
    Environment:
      Variables:
        COGNITO_USER_POOL_CLIENT_ID: !If
          - IsDev
          - !ImportValue CognitoUserPoolClientId-dev
          - !ImportValue CognitoUserPoolClientId-prod
        COGNITO_USER_POOL_ID: !If
          - IsDev
          - !ImportValue CognitoUserPoolId-dev
          - !ImportValue CognitoUserPoolId-prod

Resources:

  ClaimsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "ClaimsTable-${Env}"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id  # ✅ Primary Key
          AttributeType: S
        - AttributeName: user_id  # ✅ Secondary Index (GlobalSecondaryIndexes uses this)
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH  # ✅ The main partition key
      GlobalSecondaryIndexes:
        - IndexName: UserIdIndex
          KeySchema:
            - AttributeName: user_id
              KeyType: HASH
          Projection:
            ProjectionType: ALL


  UserPoolId:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !FindInMap [CognitoExports, !Ref Env, UserPoolId]
      Type: String
      Value: !ImportValue
        Fn::FindInMap: [CognitoExports, !Ref Env, UserPoolId]


  # API Gateway (Now Includes Cognito Authorizer)
  ClaimVisionAPI:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub "ClaimVisionAPI-${Env}"
      StageName: dev
      Cors:
        AllowMethods: "'OPTIONS,POST,GET'"
        AllowHeaders: "'Content-Type,Authorization'"
        AllowOrigin: "'*'"
      Auth:
        Authorizers:
          CognitoAuthorizer:
            UserPoolId: !Ref UserPoolId
            UserPoolArn: !Join ["", ["arn:aws:cognito-idp:", !Ref "AWS::Region", ":", !Ref "AWS::AccountId", ":userpool/", !Ref UserPoolId]]


  LoginFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: auth.login.lambda_handler
      Runtime: python3.12
      CodeUri: src/
      Policies:
        - AWSLambdaBasicExecutionRole
      Events:
        LoginAPI:
          Type: Api
          Properties:
            Path: /auth/login
            Method: POST
            RestApiId: !Ref ClaimVisionAPI # No Auth here!


  RegisterFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: auth.register.lambda_handler
      Runtime: python3.12
      CodeUri: src/
      Policies:
        - AWSLambdaBasicExecutionRole
      Events:
        RegisterAPI:
          Type: Api
          Properties:
            Path: /auth/register
            Method: POST
            RestApiId: !Ref ClaimVisionAPI 

  ConfirmFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: auth.confirm.lambda_handler
      Runtime: python3.12
      CodeUri: src/
      Policies:
        - AWSLambdaBasicExecutionRole
      Events:
        ConfirmAPI:
          Type: Api
          Properties:
            Path: /auth/confirm
            Method: POST
            RestApiId: !Ref ClaimVisionAPI
  
  ResendConfirmationFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: auth.resend_confirmation.lambda_handler
      Runtime: python3.12
      CodeUri: src/
      Policies:
        - AWSLambdaBasicExecutionRole
      Events:
        ResendConfirmationAPI:
          Type: Api
          Properties:
            Path: /auth/resend-confirmation
            Method: POST
            RestApiId: !Ref ClaimVisionAPI

    PreSignUpFunction:
    Type: AWS::Serverless::Function
    Condition: IsDev
    Properties:
      Handler: auth.pre_signup.lambda_handler
      Runtime: python3.12
      CodeUri: src/
      Policies:
        - AWSLambdaBasicExecutionRole


  # Secure API Route (/items) with Cognito Authorizer
  GetItemsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: items.get_items.lambda_handler
      Runtime: python3.12
      CodeUri: src/
      Policies:
        - AWSLambdaBasicExecutionRole
      Events:
        GetItemsAPI:
          Type: Api
          Properties:
            Path: /items
            Method: GET
            RestApiId: !Ref ClaimVisionAPI
            Auth:
              Authorizer: CognitoAuthorizer

  GetClaimsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: claims.claims.lambda_handler
      Runtime: python3.12
      CodeUri: src/
      Policies:
        - AWSLambdaBasicExecutionRole
      Environment:
        Variables:
          CLAIMS_TABLE: !Ref ClaimsTable
      Events:
        GetClaimsAPI:
          Type: Api
          Properties:
            Path: /claims
            Method: GET
            RestApiId: !Ref ClaimVisionAPI
            Auth:
              Authorizer: CognitoAuthorizer

  ClaimFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: claims.claims.lambda_handler
      Runtime: python3.12
      CodeUri: src/
      Policies:
        - AWSLambdaBasicExecutionRole
      Environment:
        Variables:
          CLAIMS_TABLE: !Ref ClaimsTable
      Events:
        GetClaimAPI:
          Type: Api
          Properties:
            Path: /claims/{id}
            Method: GET
            RestApiId: !Ref ClaimVisionAPI
            Auth:
              Authorizer: CognitoAuthorizer
        CreateClaimAPI:
          Type: Api
          Properties:
            Path: /claims
            Method: POST
            RestApiId: !Ref ClaimVisionAPI
            Auth:
              Authorizer: CognitoAuthorizer
        UpdateClaimAPI:
          Type: Api
          Properties:
            Path: /claims/{id}
            Method: PUT
            RestApiId: !Ref ClaimVisionAPI
            Auth:
              Authorizer: CognitoAuthorizer
        DeleteClaimAPI:
          Type: Api
          Properties:
            Path: /claims/{id}
            Method: DELETE
            RestApiId: !Ref ClaimVisionAPI
            Auth:
              Authorizer: CognitoAuthorizer
Outputs:
  #  Print API Gateway URL After Deployment
  ApiGatewayInvokeURL:
    Description: API Gateway Invoke URL
    Value: !Sub https://${ClaimVisionAPI}.execute-api.${AWS::Region}.amazonaws.com/dev