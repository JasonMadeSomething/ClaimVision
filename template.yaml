AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Parameters:
  Env:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - prod
    Description: 'Specify the environment: dev or prod'

Globals:
  Function:
    Timeout: 10
    MemorySize: 128
    Runtime: python3.12
    Environment:
      Variables:
        COGNITO_USER_POOL_CLIENT_ID: !Ref CognitoUserPoolClient

Resources:
  # API Gateway (Now Includes Cognito Authorizer)
  ClaimVisionAPI:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub ClaimVisionAPI-${Env}
      StageName: dev
      Cors:
        AllowMethods: '''OPTIONS,POST,GET'''
        AllowHeaders: '''Content-Type,Authorization'''
        AllowOrigin: '''*'''
      Auth:
        # Define Cognito authorizer here
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !GetAtt CognitoUserPool.Arn

  # Cognito User Pool
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub ClaimVisionUserPool-${Env}
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: true
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: false
      AutoVerifiedAttributes:
        - email

  # Cognito App Client
  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Sub ClaimVisionClient-${Env}
      UserPoolId: !Ref CognitoUserPool
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_CUSTOM_AUTH
      AllowedOAuthFlows:
        - implicit
      AllowedOAuthScopes:
        - email
        - openid
        - profile
      CallbackURLs:
        - http://localhost:3000
      LogoutURLs:
        - http://localhost:3000

  # Login Lambda Function (PUBLIC - No Cognito Required)
  LoginFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: login.lambda_handler
      Runtime: python3.12
      CodeUri: src/auth/
      Policies:
        - AWSLambdaBasicExecutionRole
      Events:
        LoginAPI:
          Type: Api
          Properties:
            Path: /auth/login
            Method: POST
            RestApiId: !Ref ClaimVisionAPI # No Auth here!


  RegisterFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: register.lambda_handler
      Runtime: python3.12
      CodeUri: src/auth/
      Policies:
        - AWSLambdaBasicExecutionRole
      Events:
        RegisterAPI:
          Type: Api
          Properties:
            Path: /auth/register
            Method: POST
            RestApiId: !Ref ClaimVisionAPI 

  

  # Secure API Route (/items) with Cognito Authorizer
  GetItemsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: get_items.lambda_handler
      Runtime: python3.12
      CodeUri: src/items/
      Policies:
        - AWSLambdaBasicExecutionRole
      Events:
        GetItemsAPI:
          Type: Api
          Properties:
            Path: /items
            Method: GET
            RestApiId: !Ref ClaimVisionAPI
            Auth:
              Authorizer: CognitoAuthorizer

Outputs:
  #  Print API Gateway URL After Deployment
  ApiGatewayInvokeURL:
    Description: API Gateway Invoke URL
    Value: !Sub https://${ClaimVisionAPI}.execute-api.${AWS::Region}.amazonaws.com/dev
  CognitoUserPoolId:
    Description: Cognito User Pool ID
    Value: !Ref CognitoUserPool
  CognitoUserPoolClientId:
    Description: Cognito User Pool Client ID
    Value: !Ref CognitoUserPoolClient