AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Parameters:
  Env:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - prod
    Description: "Specify the environment: dev or prod"

Globals:
  Function:
    Timeout: 10
    MemorySize: 128
    Runtime: python3.12
    Environment:
      Variables:
        AWS_REGION: "us-east-1"
        COGNITO_USER_POOL_CLIENT_ID: !Ref CognitoUserPoolClient

Resources:
  # API Gateway (Define API Gateway Before Authorizer)
  ClaimVisionAPI:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub "ClaimVisionAPI-${Env}"
      StageName: dev
      Cors:
        AllowMethods: "'OPTIONS,POST,GET'"
        AllowHeaders: "'Content-Type,Authorization'"
        AllowOrigin: "'*'"

  # Cognito User Pool
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub "ClaimVisionUserPool-${Env}"
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: true
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: false
      AutoVerifiedAttributes:
        - email

  # Cognito App Client
  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Sub "ClaimVisionClient-${Env}"
      UserPoolId: !Ref CognitoUserPool
      GenerateSecret: false
      AllowedOAuthFlows:
        - implicit
      AllowedOAuthScopes:
        - email
        - openid
        - profile
      CallbackURLs:
        - "http://localhost:3000"
      LogoutURLs:
        - "http://localhost:3000"

  # Cognito Authorizer (Must Reference API Gateway!)
  CognitoAuthorizer:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub "CognitoAuthorizer-${Env}"
      StageName: dev
      Auth:
        DefaultAuthorizer: CognitoAuth
        Authorizers:
          CognitoAuth:
            UserPoolArn: !GetAtt CognitoUserPool.Arn

  # Login Lambda Function (PUBLIC - No Auth Required)
  LoginFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: auth.login.lambda_handler
      Runtime: python3.12
      CodeUri: src/auth/
      Policies:
        - AWSLambdaBasicExecutionRole
      Events:
        LoginAPI:
          Type: Api
          Properties:
            Path: /auth/login
            Method: POST
            RestApiId: !Ref ClaimVisionAPI

  # Example Protected Route (Requires Cognito Authorization)
  GetItemsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: items.get_items.lambda_handler
      Runtime: python3.12
      CodeUri: src/items/
      Policies:
        - AWSLambdaBasicExecutionRole
      Events:
        GetItemsAPI:
          Type: Api
          Properties:
            Path: /items
            Method: GET
            RestApiId: !Ref ClaimVisionAPI
            Auth:
              Authorizer: CognitoAuthorizer  # Attach Cognito Authenticator
