AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Parameters:
  Env:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - prod
    Description: Environment name
  S3BucketNameSSMPath:
    Type: String
    Default: /terraform/s3/bucket_name
    Description: SSM Parameter Store path for S3 bucket name
  S3BucketName:
    Type: String
    Default: claimvision-files-dev
    Description: S3 bucket name for file storage
  CognitoUserPoolId:
    Type: String
    Description: The Cognito User Pool ID from the external stack
  RDSEndpointSSMPath:
    Type: String
    Default: /terraform/database/host
    Description: SSM Parameter Store path for RDS endpoint
  DBUsernameSSMPath:
    Type: String
    Default: /terraform/database/username
    Description: SSM Parameter Store path for database username
  DBPasswordSSMPath:
    Type: String
    Default: /terraform/database/password
    Description: SSM Parameter Store path for database password
  DBUsername:
    Type: String
    Description: Database username
  DBPassword:
    Type: String
    Description: Database password
  DBEndpoint:
    Type: String
    Description: Database endpoint
  FileUploadQueueURL:
    Type: String
    Description: URL of the file upload SQS queue
  FileUploadQueueARN:
    Type: String
    Description: ARN of the file upload SQS queue
  FileUploadQueueName:
    Type: String
    Description: Name of the file upload SQS queue
  S3UploadNotificationQueueARN:
    Type: String
    Description: ARN of the S3 upload notification SQS queue
  S3UploadNotificationQueueURL:
    Type: String
    Description: URL of the S3 upload notification SQS queue
  FileAnalysisQueueURL:
    Type: String
    Description: URL of the file analysis SQS queue
  FileAnalysisQueueARN:
    Type: String
    Description: ARN of the file analysis SQS queue
  FileAnalysisQueueName:
    Type: String
    Description: Name of the file analysis SQS queue
  UserRegistrationQueueURL:
    Type: String
    Description: URL of the user registration SQS queue
  UserRegistrationQueueARN:
    Type: String
    Description: ARN of the user registration SQS queue
  UserRegistrationQueueName:
    Type: String
    Description: Name of the user registration SQS queue
  CognitoUpdateQueueURL:
    Type: String
    Description: URL of the Cognito update SQS queue
  CognitoUpdateQueueARN:
    Type: String
    Description: ARN of the Cognito update SQS queue
  CognitoUpdateQueueName:
    Type: String
    Description: Name of the Cognito update SQS queue
  VpcId:
    Type: String
    Default: ''
    Description: VPC ID for Lambda functions
  SubnetIds:
    Type: CommaDelimitedList
    Default: ''
    Description: Subnet IDs for Lambda functions (comma-delimited)
  SecurityGroupIds:
    Type: CommaDelimitedList
    Default: ''
    Description: Security Group IDs for Lambda functions (comma-delimited)
  RouteTableIds:
    Type: String
    Default: ''
    Description: Route Table ID for Lambda functions
  EnableDNS:
    Type: String
    Default: false
    AllowedValues:
      - true
      - false
    Description: Enable DNS for Lambda functions

  OutboundMessagesQueueURL:
    Type: String
    Description: URL of the outbound messages SQS queue for WebSocket notifications
  OutboundMessagesQueueARN:
    Type: String
    Description: ARN of the outbound messages SQS queue for WebSocket notifications
  OutboundMessagesQueueName:
    Type: String
    Description: Name of the outbound messages SQS queue for WebSocket notifications

  BatchTrackingQueueName:
    Type: String
    Description: Name of the SQS queue for batch tracking events
    Default: batch-tracking-queue

  BatchTrackingQueueDLQName:
    Type: String
    Description: Name of the DLQ for batch tracking events
    Default: batch-tracking-dlq

  BatchTrackingQueueURL:
    Type: String
    Description: URL of the SQS queue for batch tracking events

  BatchTrackingQueueARN:
    Type: String
    Description: ARN of the SQS queue for batch tracking events

  # Report Infrastructure Parameters
  ReportsBucketName:
    Type: String
    Description: S3 bucket name for storing reports
  ReportRequestQueueURL:
    Type: String
    Description: URL of the report request SQS queue
  ReportRequestQueueARN:
    Type: String
    Description: ARN of the report request SQS queue
  ReportRequestQueueName:
    Type: String
    Description: Name of the report request SQS queue
  FileOrganizationQueueURL:
    Type: String
    Description: URL of the file organization SQS queue
  FileOrganizationQueueARN:
    Type: String
    Description: ARN of the file organization SQS queue
  FileOrganizationQueueName:
    Type: String
    Description: Name of the file organization SQS queue
  EmailQueueURL:
    Type: String
    Description: URL of the email SQS queue for sending report notifications
  EmailQueueARN:
    Type: String
    Description: ARN of the email SQS queue for sending report notifications
  EmailQueueName:
    Type: String
    Description: Name of the email SQS queue for sending report notifications
  EFSAccessPointARN:
    Type: String
    Description: ARN of the EFS access point for report files
  EFSFileSystemId:
    Type: String
    Description: ID of the EFS file system for report files
  SenderEmail:
    Type: String
    Description: Email address used for sending report notifications
  DeliverReportQueueARN:
    Type: String
    Description: ARN of the deliver report SQS queue
  DeliverReportQueueURL:
    Type: String
    Description: URL of the deliver report SQS queue
  HostedZoneId:
    Type: String
    Description: Route 53 Hosted Zone ID
  ApiDomainName:
    Type: String
    Description: Fully qualified domain name for the API
  WsDomainName:
    Type: String
    Description: Fully qualified domain name for the WebSocket API
  FrontendOrigin:
    Type: String
    Description: Frontend origin URL

Conditions:
  IsDev: !Equals
    - !Ref Env
    - dev
  HasVpc: !Not
    - !Equals
      - !Ref VpcId
      - ''
  CreateDNS: !Equals
    - !Ref EnableDNS
    - true

Globals:
  Function:
    Timeout: 30
    MemorySize: 128
    Runtime: python3.12
    Environment:
      Variables:
        DB_USERNAME: !Ref DBUsername
        DB_PASSWORD: !Ref DBPassword
        DB_HOST: !Ref DBEndpoint
        DB_NAME: claimvision
        USER_REGISTRATION_QUEUE_URL: !Ref UserRegistrationQueueURL
        COGNITO_UPDATE_QUEUE_URL: !Ref CognitoUpdateQueueURL
        FRONTEND_ORIGIN: !Ref FrontendOrigin
    VpcConfig: !If
      - HasVpc
      - SubnetIds: !Ref SubnetIds
        SecurityGroupIds: !Ref SecurityGroupIds
      - !Ref AWS::NoValue
  Api:
    Auth:
      DefaultAuthorizer: CognitoAuthorizer
      AddDefaultAuthorizerToCorsPreflight: false

Resources:
  # IAM Role for Lambda functions
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - !If
          - HasVpc
          - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
          - !Ref AWS::NoValue
      Policies:
        - PolicyName: SSMParameterAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                  - ssm:GetParameters
                Resource:
                  - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${DBUsernameSSMPath}
                  - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${DBPasswordSSMPath}
                  - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${RDSEndpointSSMPath}
                  - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${S3BucketNameSSMPath}
        - PolicyName: SQSAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                  - sqs:GetQueueUrl
                Resource:
                  - !Sub arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:${FileUploadQueueName}
                  - !Sub arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:${FileAnalysisQueueName}
        - PolicyName: CognitoAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cognito-idp:SignUp
                  - cognito-idp:AdminUpdateUserAttributes
                  - cognito-idp:AdminConfirmSignUp
                  - cognito-idp:AdminInitiateAuth
                  - cognito-idp:AdminRespondToAuthChallenge
                  - cognito-idp:AdminGetUser
                Resource: !Sub arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${CognitoUserPoolId}
        - PolicyName: DBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - rds-db:connect
                Resource: '*'
        - !If
          - HasVpc
          - PolicyName: VPCAccessPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - ec2:CreateNetworkInterface
                    - ec2:DescribeNetworkInterfaces
                    - ec2:DeleteNetworkInterface
                    - ec2:AssignPrivateIpAddresses
                    - ec2:UnassignPrivateIpAddresses
                  Resource: '*'
          - !Ref AWS::NoValue

  # IAM Role for Process File Lambda
  ProcessFileLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - !If
          - HasVpc
          - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
          - !Ref AWS::NoValue
      Policies:
        - PolicyName: SQSAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                  - sqs:ChangeMessageVisibility
                Resource:
                  - !Ref FileUploadQueueARN
                  - !Ref S3UploadNotificationQueueARN
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                Resource:
                  - !Ref FileAnalysisQueueARN
                  - !Ref FileUploadQueueARN
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:ListBucket
                Resource:
                  - !Sub arn:aws:s3:::claimvision-files-${AWS::AccountId}-${Env}
                  - !Sub arn:aws:s3:::claimvision-files-${AWS::AccountId}-${Env}/*
        - PolicyName: DBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - rds-db:connect
                Resource: '*'
        - !If
          - HasVpc
          - PolicyName: VPCAccessPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - ec2:CreateNetworkInterface
                    - ec2:DescribeNetworkInterfaces
                    - ec2:DeleteNetworkInterface
                    - ec2:AssignPrivateIpAddresses
                    - ec2:UnassignPrivateIpAddresses
                  Resource: '*'
          - !Ref AWS::NoValue

  # IAM Role for Analyze File Lambda
  AnalyzeFileLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - !If
          - HasVpc
          - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
          - !Ref AWS::NoValue
      Policies:
        - PolicyName: SQSAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                  - sqs:ChangeMessageVisibility
                Resource:
                  - !Ref FileAnalysisQueueARN
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - !Sub arn:aws:s3:::claimvision-files-${AWS::AccountId}-${Env}
                  - !Sub arn:aws:s3:::claimvision-files-${AWS::AccountId}-${Env}/*
        - PolicyName: DBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - rds-db:connect
                Resource: '*'
        - PolicyName: RekognitionAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - rekognition:DetectLabels
                  - rekognition:DetectText
                Resource: '*'
        - !If
          - HasVpc
          - PolicyName: VPCAccessPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - ec2:CreateNetworkInterface
                    - ec2:DescribeNetworkInterfaces
                    - ec2:DeleteNetworkInterface
                    - ec2:AssignPrivateIpAddresses
                    - ec2:UnassignPrivateIpAddresses
                  Resource: '*'
          - !Ref AWS::NoValue

  # IAM Role for RegisterDb Lambda
  RegisterDbLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - !If
          - HasVpc
          - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
          - !Ref AWS::NoValue
      Policies:
        - PolicyName: SQSAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                  - sqs:ChangeMessageVisibility
                Resource:
                  - !Ref UserRegistrationQueueARN
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                Resource: !Ref CognitoUpdateQueueARN
        - PolicyName: DBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - rds-db:connect
                Resource: '*'
        - !If
          - HasVpc
          - PolicyName: VPCAccessPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - ec2:CreateNetworkInterface
                    - ec2:DescribeNetworkInterfaces
                    - ec2:DeleteNetworkInterface
                    - ec2:AssignPrivateIpAddresses
                    - ec2:UnassignPrivateIpAddresses
                  Resource: '*'
          - !Ref AWS::NoValue

  # IAM Role for RegisterCognito Lambda
  RegisterCognitoLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: CognitoAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cognito-idp:SignUp
                  - cognito-idp:AdminGetUser
                Resource: !Sub arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${CognitoUserPoolId}
        - PolicyName: SQSAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                Resource: !Ref UserRegistrationQueueARN

  ###API###
  # API Gateway
  ClaimVisionAPI:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub ClaimVisionAPI-${Env}
      StageName: dev
      Auth:
        DefaultAuthorizer: CognitoAuthorizer
        AddDefaultAuthorizerToCorsPreflight: false
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !Sub arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${CognitoUserPoolId}

  ###Lambdas###

  ##This better work##
  PreflightFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: misc.preflight.lambda_handler
      Runtime: python3.12
      CodeUri: src/
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        CatchAllOptions:
          Type: Api
          Properties:
            Path: /{proxy+}
            Method: OPTIONS
            RestApiId: !Ref ClaimVisionAPI
            Auth:
              Authorizer: NONE
  ##Auth##
  # Login Function
  LoginFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: auth.login.lambda_handler
      Runtime: python3.12
      CodeUri: src/
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          COGNITO_USER_POOL_CLIENT_ID: !If
            - IsDev
            - !ImportValue CognitoUserPoolClientId-dev
            - !ImportValue CognitoUserPoolClientId-prod
          COGNITO_USER_POOL_ID: !If
            - IsDev
            - !ImportValue CognitoUserPoolId-dev
            - !ImportValue CognitoUserPoolId-prod
      VpcConfig: !Ref AWS::NoValue
      Policies:
        - AWSLambdaBasicExecutionRole
        - Statement:
            Effect: Allow
            Action:
              - cognito-idp:InitiateAuth
              - cognito-idp:AdminGetUser
            Resource: !Sub arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${CognitoUserPoolId}
      Events:
        LoginAPI:
          Type: Api
          Properties:
            Path: /auth/login
            Method: POST
            RestApiId: !Ref ClaimVisionAPI
            Auth:
              Authorizer: NONE
  # User Registration with Cognito
  RegisterCognitoFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: auth.register_cognito.lambda_handler
      Runtime: python3.12
      Role: !GetAtt RegisterCognitoLambdaRole.Arn
      Environment:
        Variables:
          COGNITO_USER_POOL_CLIENT_ID: !If
            - IsDev
            - !ImportValue CognitoUserPoolClientId-dev
            - !ImportValue CognitoUserPoolClientId-prod
          COGNITO_USER_POOL_ID: !If
            - IsDev
            - !ImportValue CognitoUserPoolId-dev
            - !ImportValue CognitoUserPoolId-prod
          USER_REGISTRATION_QUEUE_URL: !Ref UserRegistrationQueueURL
      VpcConfig: !Ref AWS::NoValue
      Policies:
        - AWSLambdaBasicExecutionRole
        - Statement:
            Effect: Allow
            Action:
              - cognito-idp:SignUp
            Resource: !Sub arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${CognitoUserPoolId}
      Events:
        RegisterAPI:
          Type: Api
          Properties:
            Path: /auth/register
            Method: POST
            RestApiId: !Ref ClaimVisionAPI
            Auth:
              Authorizer: NONE
  # User Registration with Database
  RegisterDbFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: auth.register_db.lambda_handler
      Runtime: python3.12
      Role: !GetAtt RegisterDbLambdaRole.Arn
      Environment:
        Variables:
          DB_USERNAME: !Ref DBUsername
          DB_PASSWORD: !Ref DBPassword
          DB_HOST: !Ref DBEndpoint
          DB_NAME: claimvision
          COGNITO_UPDATE_QUEUE_URL: !Ref CognitoUpdateQueueURL
      Events:
        SQSTrigger:
          Type: SQS
          Properties:
            Queue: !Ref UserRegistrationQueueARN
            BatchSize: 10
            Enabled: true

  # Confirm Email
  ConfirmFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: auth.confirm.lambda_handler
      Runtime: python3.12
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          COGNITO_USER_POOL_CLIENT_ID: !If
            - IsDev
            - !ImportValue CognitoUserPoolClientId-dev
            - !ImportValue CognitoUserPoolClientId-prod
          COGNITO_USER_POOL_ID: !If
            - IsDev
            - !ImportValue CognitoUserPoolId-dev
            - !ImportValue CognitoUserPoolId-prod
      VpcConfig: !Ref AWS::NoValue
      Policies:
        - AWSLambdaBasicExecutionRole
        - Statement:
            Effect: Allow
            Action:
              - cognito-idp:ConfirmSignUp
            Resource: !Sub arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${CognitoUserPoolId}
      Events:
        ConfirmAPI:
          Type: Api
          Properties:
            Path: /auth/confirm
            Method: POST
            RestApiId: !Ref ClaimVisionAPI
            Auth:
              Authorizer: NONE
  # Resend Email Verification
  ResendConfirmationFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: auth.resend_confirmation.lambda_handler
      Runtime: python3.12
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          COGNITO_USER_POOL_CLIENT_ID: !If
            - IsDev
            - !ImportValue CognitoUserPoolClientId-dev
            - !ImportValue CognitoUserPoolClientId-prod
          COGNITO_USER_POOL_ID: !If
            - IsDev
            - !ImportValue CognitoUserPoolId-dev
            - !ImportValue CognitoUserPoolId-prod
      Policies:
        - AWSLambdaBasicExecutionRole
        - Statement:
            Effect: Allow
            Action:
              - cognito-idp:ResendConfirmationCode
            Resource: !Sub arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${CognitoUserPoolId}
      Events:
        ResendConfirmationAPI:
          Type: Api
          Properties:
            Path: /auth/resend-confirmation
            Method: POST
            RestApiId: !Ref ClaimVisionAPI
            Auth:
              Authorizer: NONE

  # Dev bypass email verification
  PreSignUpFunction:
    Type: AWS::Serverless::Function
    Condition: IsDev
    Properties:
      CodeUri: src/
      Handler: auth.pre_signup.lambda_handler
      Runtime: python3.12
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          COGNITO_USER_POOL_ID: !If
            - IsDev
            - !ImportValue CognitoUserPoolId-dev
            - !ImportValue CognitoUserPoolId-prod
          AUTO_CONFIRM_USER: !If
            - IsDev
            - 'true'
            - 'false'
      Policies:
        - AWSLambdaBasicExecutionRole
        - Statement:
            Effect: Allow
            Action:
              - cognito-idp:AdminUpdateUserAttributes
            Resource: !Sub arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${CognitoUserPoolId}

  # Get Claims Function
  GetClaimsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: claims.get_claims.lambda_handler
      Runtime: python3.12
      VpcConfig: !If
        - HasVpc
        - SubnetIds: !Ref SubnetIds
          SecurityGroupIds: !Ref SecurityGroupIds
        - !Ref AWS::NoValue
      Policies:
        - Statement:
            Effect: Allow
            Action:
              - ssm:GetParameter
              - ssm:GetParameters
            Resource:
              - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${RDSEndpointSSMPath}
              - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${DBUsernameSSMPath}
              - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${DBPasswordSSMPath}
        - AWSLambdaBasicExecutionRole
      Environment:
        Variables:
          DB_USERNAME: !Ref DBUsername
          DB_PASSWORD: !Ref DBPassword
          DB_HOST: !Ref DBEndpoint
          DB_NAME: claimvision
      Events:
        GetClaimsAPI:
          Type: Api
          Properties:
            Path: /claims
            Method: GET
            RestApiId: !Ref ClaimVisionAPI

  # Create Claim Function
  CreateClaimFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: claims.create_claim.lambda_handler
      Runtime: python3.12
      VpcConfig: !If
        - HasVpc
        - SubnetIds: !Ref SubnetIds
          SecurityGroupIds: !Ref SecurityGroupIds
        - !Ref AWS::NoValue
      CodeUri: src/
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          DB_USERNAME: !Ref DBUsername
          DB_PASSWORD: !Ref DBPassword
          DB_HOST: !Ref DBEndpoint
          DB_NAME: claimvision
      Events:
        CreateClaimAPI:
          Type: Api
          Properties:
            Path: /claims
            Method: POST
            RestApiId: !Ref ClaimVisionAPI

  # Get Claim Function
  GetClaimFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: claims.get_claim.lambda_handler
      Runtime: python3.12
      VpcConfig: !If
        - HasVpc
        - SubnetIds: !Ref SubnetIds
          SecurityGroupIds: !Ref SecurityGroupIds
        - !Ref AWS::NoValue
      CodeUri: src/
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          DB_USERNAME: !Ref DBUsername
          DB_PASSWORD: !Ref DBPassword
          DB_HOST: !Ref DBEndpoint
          DB_NAME: claimvision
      Events:
        GetClaimAPI:
          Type: Api
          Properties:
            Path: /claims/{claim_id}
            Method: GET
            RestApiId: !Ref ClaimVisionAPI

  # Update Claim Function
  UpdateClaimFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: claims.update_claim.lambda_handler
      Runtime: python3.12
      VpcConfig: !If
        - HasVpc
        - SubnetIds: !Ref SubnetIds
          SecurityGroupIds: !Ref SecurityGroupIds
        - !Ref AWS::NoValue
      CodeUri: src/
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          DB_USERNAME: !Ref DBUsername
          DB_PASSWORD: !Ref DBPassword
          DB_HOST: !Ref DBEndpoint
          DB_NAME: claimvision
      Events:
        UpdateClaimAPI:
          Type: Api
          Properties:
            Path: /claims/{claim_id}
            Method: PUT
            RestApiId: !Ref ClaimVisionAPI

  # Delete Claim Function
  DeleteClaimFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: claims.delete_claim.lambda_handler
      Runtime: python3.12
      VpcConfig: !If
        - HasVpc
        - SubnetIds: !Ref SubnetIds
          SecurityGroupIds: !Ref SecurityGroupIds
        - !Ref AWS::NoValue
      CodeUri: src/
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          DB_USERNAME: !Ref DBUsername
          DB_PASSWORD: !Ref DBPassword
          DB_HOST: !Ref DBEndpoint
          DB_NAME: claimvision
      Events:
        DeleteClaimAPI:
          Type: Api
          Properties:
            Path: /claims/{claim_id}
            Method: DELETE
            RestApiId: !Ref ClaimVisionAPI

  # Create Item Function
  CreateItemFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: items.create_item.lambda_handler
      Runtime: python3.12
      VpcConfig: !If
        - HasVpc
        - SubnetIds: !Ref SubnetIds
          SecurityGroupIds: !Ref SecurityGroupIds
        - !Ref AWS::NoValue
      CodeUri: src/
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          DB_USERNAME: !Ref DBUsername
          DB_PASSWORD: !Ref DBPassword
          DB_HOST: !Ref DBEndpoint
          DB_NAME: claimvision
      Events:
        CreateItemAPI:
          Type: Api
          Properties:
            Path: /claims/{claim_id}/items
            Method: POST
            RestApiId: !Ref ClaimVisionAPI

  # Get Items Function
  GetItemsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: items.get_items.lambda_handler
      Runtime: python3.12
      VpcConfig: !If
        - HasVpc
        - SubnetIds: !Ref SubnetIds
          SecurityGroupIds: !Ref SecurityGroupIds
        - !Ref AWS::NoValue
      CodeUri: src/
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          DB_USERNAME: !Ref DBUsername
          DB_PASSWORD: !Ref DBPassword
          DB_HOST: !Ref DBEndpoint
          DB_NAME: claimvision
      Events:
        GetItemsAPI:
          Type: Api
          Properties:
            Path: /claims/{claim_id}/items
            Method: GET
            RestApiId: !Ref ClaimVisionAPI

  # Get Item Function
  GetItemFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: items.get_item.lambda_handler
      Runtime: python3.12
      VpcConfig: !If
        - HasVpc
        - SubnetIds: !Ref SubnetIds
          SecurityGroupIds: !Ref SecurityGroupIds
        - !Ref AWS::NoValue
      CodeUri: src/
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          DB_USERNAME: !Ref DBUsername
          DB_PASSWORD: !Ref DBPassword
          DB_HOST: !Ref DBEndpoint
          DB_NAME: claimvision
      Events:
        GetItemAPI:
          Type: Api
          Properties:
            Path: /items/{item_id}
            Method: GET
            RestApiId: !Ref ClaimVisionAPI

  # Update Item Function
  UpdateItemFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: items.update_item.lambda_handler
      Runtime: python3.12
      VpcConfig: !If
        - HasVpc
        - SubnetIds: !Ref SubnetIds
          SecurityGroupIds: !Ref SecurityGroupIds
        - !Ref AWS::NoValue
      CodeUri: src/
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          DB_USERNAME: !Ref DBUsername
          DB_PASSWORD: !Ref DBPassword
          DB_HOST: !Ref DBEndpoint
          DB_NAME: claimvision
      Events:
        UpdateItemAPI:
          Type: Api
          Properties:
            Path: /items/{item_id}
            Method: PUT
            RestApiId: !Ref ClaimVisionAPI

  # Delete Item Function
  DeleteItemFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: items.delete_item.lambda_handler
      Runtime: python3.12
      VpcConfig: !If
        - HasVpc
        - SubnetIds: !Ref SubnetIds
          SecurityGroupIds: !Ref SecurityGroupIds
        - !Ref AWS::NoValue
      CodeUri: src/
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          DB_USERNAME: !Ref DBUsername
          DB_PASSWORD: !Ref DBPassword
          DB_HOST: !Ref DBEndpoint
          DB_NAME: claimvision
      Events:
        DeleteItemAPI:
          Type: Api
          Properties:
            Path: /items/{item_id}
            Method: DELETE
            RestApiId: !Ref ClaimVisionAPI

  # Associate File with Item Function
  AssociateFileFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: items.associate_file.lambda_handler
      Runtime: python3.12
      VpcConfig: !If
        - HasVpc
        - SubnetIds: !Ref SubnetIds
          SecurityGroupIds: !Ref SecurityGroupIds
        - !Ref AWS::NoValue
      CodeUri: src/
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          DB_USERNAME: !Ref DBUsername
          DB_PASSWORD: !Ref DBPassword
          DB_HOST: !Ref DBEndpoint
          DB_NAME: claimvision
      Events:
        AssociateFileAPI:
          Type: Api
          Properties:
            Path: /items/{item_id}/files
            Method: POST
            RestApiId: !Ref ClaimVisionAPI

  # Inherit Labels from File Function
  InheritLabelsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: items.inherit_labels.lambda_handler
      Runtime: python3.12
      VpcConfig: !If
        - HasVpc
        - SubnetIds: !Ref SubnetIds
          SecurityGroupIds: !Ref SecurityGroupIds
        - !Ref AWS::NoValue
      CodeUri: src/
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          DB_USERNAME: !Ref DBUsername
          DB_PASSWORD: !Ref DBPassword
          DB_HOST: !Ref DBEndpoint
          DB_NAME: claimvision
      Events:
        InheritLabelsAPI:
          Type: Api
          Properties:
            Path: /items/{item_id}/inherit/{file_id}
            Method: POST
            RestApiId: !Ref ClaimVisionAPI

  # Manage Item Labels Function
  ManageLabelsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: items.manage_labels.lambda_handler
      Runtime: python3.12
      VpcConfig: !If
        - HasVpc
        - SubnetIds: !Ref SubnetIds
          SecurityGroupIds: !Ref SecurityGroupIds
        - !Ref AWS::NoValue
      CodeUri: src/
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          DB_USERNAME: !Ref DBUsername
          DB_PASSWORD: !Ref DBPassword
          DB_HOST: !Ref DBEndpoint
          DB_NAME: claimvision
      Events:
        ManageLabelsAPI:
          Type: Api
          Properties:
            Path: /items/{item_id}/labels
            Method: PATCH
            RestApiId: !Ref ClaimVisionAPI

  # Create Label Function
  CreateLabelFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: labels.create_label.lambda_handler
      Runtime: python3.12
      VpcConfig: !If
        - HasVpc
        - SubnetIds: !Ref SubnetIds
          SecurityGroupIds: !Ref SecurityGroupIds
        - !Ref AWS::NoValue
      CodeUri: src/
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          DB_USERNAME: !Ref DBUsername
          DB_PASSWORD: !Ref DBPassword
          DB_HOST: !Ref DBEndpoint
          DB_NAME: claimvision
      Events:
        CreateLabelAPI:
          Type: Api
          Properties:
            Path: /files/{file_id}/labels
            Method: POST
            RestApiId: !Ref ClaimVisionAPI

  # Get Labels Function
  GetLabelsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: labels.get_labels.lambda_handler
      Runtime: python3.12
      VpcConfig: !If
        - HasVpc
        - SubnetIds: !Ref SubnetIds
          SecurityGroupIds: !Ref SecurityGroupIds
        - !Ref AWS::NoValue
      CodeUri: src/
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          DB_USERNAME: !Ref DBUsername
          DB_PASSWORD: !Ref DBPassword
          DB_HOST: !Ref DBEndpoint
          DB_NAME: claimvision
      Events:
        GetLabelsAPI:
          Type: Api
          Properties:
            Path: /files/{file_id}/labels
            Method: GET
            RestApiId: !Ref ClaimVisionAPI

  # Delete Label Function
  DeleteLabelFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: labels.delete_label.lambda_handler
      Runtime: python3.12
      VpcConfig: !If
        - HasVpc
        - SubnetIds: !Ref SubnetIds
          SecurityGroupIds: !Ref SecurityGroupIds
        - !Ref AWS::NoValue
      CodeUri: src/
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          DB_USERNAME: !Ref DBUsername
          DB_PASSWORD: !Ref DBPassword
          DB_HOST: !Ref DBEndpoint
          DB_NAME: claimvision
      Events:
        DeleteLabelAPI:
          Type: Api
          Properties:
            Path: /files/{file_id}/labels/{label_id}
            Method: DELETE
            RestApiId: !Ref ClaimVisionAPI

  # Remove Label Function
  RemoveLabelFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: labels.remove_label.lambda_handler
      Runtime: python3.12
      VpcConfig: !If
        - HasVpc
        - SubnetIds: !Ref SubnetIds
          SecurityGroupIds: !Ref SecurityGroupIds
        - !Ref AWS::NoValue
      CodeUri: src/
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          DB_USERNAME: !Ref DBUsername
          DB_PASSWORD: !Ref DBPassword
          DB_HOST: !Ref DBEndpoint
          DB_NAME: claimvision
      Events:
        RemoveLabelAPI:
          Type: Api
          Properties:
            Path: /files/{file_id}/labels/{label_id}/remove
            Method: PUT
            RestApiId: !Ref ClaimVisionAPI

  # Restore Label Function
  RestoreLabelFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: labels.restore_label.lambda_handler
      Runtime: python3.12
      VpcConfig: !If
        - HasVpc
        - SubnetIds: !Ref SubnetIds
          SecurityGroupIds: !Ref SecurityGroupIds
        - !Ref AWS::NoValue
      CodeUri: src/
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          DB_USERNAME: !Ref DBUsername
          DB_PASSWORD: !Ref DBPassword
          DB_HOST: !Ref DBEndpoint
          DB_NAME: claimvision
      Events:
        RestoreLabelAPI:
          Type: Api
          Properties:
            Path: /files/{file_id}/labels/{label_id}/restore
            Method: PUT
            RestApiId: !Ref ClaimVisionAPI

  # Room Functions
  # Get Rooms Function
  GetRoomsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: rooms.get_rooms.lambda_handler
      Runtime: python3.12
      VpcConfig: !If
        - HasVpc
        - SubnetIds: !Ref SubnetIds
          SecurityGroupIds: !Ref SecurityGroupIds
        - !Ref AWS::NoValue
      CodeUri: src/
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          DB_USERNAME: !Ref DBUsername
          DB_PASSWORD: !Ref DBPassword
          DB_HOST: !Ref DBEndpoint
          DB_NAME: claimvision
      Events:
        GetRoomsAPI:
          Type: Api
          Properties:
            Path: /rooms
            Method: GET
            RestApiId: !Ref ClaimVisionAPI
        GetClaimRoomsAPI:
          Type: Api
          Properties:
            Path: /claims/{claim_id}/rooms
            Method: GET
            RestApiId: !Ref ClaimVisionAPI
        GetRoomsAPI:
          Type: Api
          Properties:
            Path: /rooms
            Method: GET
            RestApiId: !Ref ClaimVisionAPI
            
  # Add Room to Claim Function
  AddRoomToClaimFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: rooms.add_room_to_claim.lambda_handler
      Runtime: python3.12
      VpcConfig: !If
        - HasVpc
        - SubnetIds: !Ref SubnetIds
          SecurityGroupIds: !Ref SecurityGroupIds
        - !Ref AWS::NoValue
      CodeUri: src/
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          DB_USERNAME: !Ref DBUsername
          DB_PASSWORD: !Ref DBPassword
          DB_HOST: !Ref DBEndpoint
          DB_NAME: claimvision
      Events:
        AddRoomToClaimAPI:
          Type: Api
          Properties:
            Path: /claims/{claim_id}/rooms/{room_id}
            Method: POST
            RestApiId: !Ref ClaimVisionAPI

  # Remove Room from Claim Function
  RemoveRoomFromClaimFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: rooms.remove_room_from_claim.lambda_handler
      Runtime: python3.12
      VpcConfig: !If
        - HasVpc
        - SubnetIds: !Ref SubnetIds
          SecurityGroupIds: !Ref SecurityGroupIds
        - !Ref AWS::NoValue
      CodeUri: src/
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          DB_USERNAME: !Ref DBUsername
          DB_PASSWORD: !Ref DBPassword
          DB_HOST: !Ref DBEndpoint
          DB_NAME: claimvision
      Events:
        RemoveRoomFromClaimAPI:
          Type: Api
          Properties:
            Path: /claims/{claim_id}/rooms/{room_id}
            Method: DELETE
            RestApiId: !Ref ClaimVisionAPI

  ##Admin##
  # Get Users Function
  GetUsersFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: admin.get_users.lambda_handler
      Runtime: python3.12
      VpcConfig: !If
        - HasVpc
        - SubnetIds: !Ref SubnetIds
          SecurityGroupIds: !Ref SecurityGroupIds
        - !Ref AWS::NoValue
      CodeUri: src/
      Role: !GetAtt LambdaExecutionRole.Arn
      Policies:
        - Statement:
            Effect: Allow
            Action:
              - cognito-idp:ListUsers # Allow listing users in Cognito
            Resource:
              - !Sub arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${CognitoUserPoolId}
        - AWSLambdaBasicExecutionRole
      Environment:
        Variables:
          DB_USERNAME: !Ref DBUsername
          DB_PASSWORD: !Ref DBPassword
          DB_HOST: !Ref DBEndpoint
          DB_NAME: claimvision
          COGNITO_USER_POOL_ID: !If
            - IsDev
            - !ImportValue CognitoUserPoolId-dev
            - !ImportValue CognitoUserPoolId-prod
      Events:
        GetUsersAPI:
          Type: Api
          Properties:
            Path: /admin/users
            Method: GET
            RestApiId: !Ref ClaimVisionAPI

  # Update User Role Function
  UpdateUserRoleFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: admin.update_user_role.lambda_handler
      Runtime: python3.12
      VpcConfig: !If
        - HasVpc
        - SubnetIds: !Ref SubnetIds
          SecurityGroupIds: !Ref SecurityGroupIds
        - !Ref AWS::NoValue
      CodeUri: src/
      Role: !GetAtt LambdaExecutionRole.Arn
      Policies:
        - Statement:
            Effect: Allow
            Action:
              - ssm:GetParameter
              - ssm:GetParameters
            Resource:
              - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${RDSEndpointSSMPath}
              - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${DBUsernameSSMPath}
              - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${DBPasswordSSMPath}
        - Statement:
            Effect: Allow
            Action:
              - cognito-idp:AdminAddUserToGroup
              - cognito-idp:AdminRemoveUserFromGroup
            Resource: !Sub arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${CognitoUserPoolId}
        - AWSLambdaBasicExecutionRole
      Environment:
        Variables:
          DB_USERNAME: !Ref DBUsername
          DB_PASSWORD: !Ref DBPassword
          DB_HOST: !Ref DBEndpoint
          DB_NAME: claimvision
          COGNITO_USER_POOL_ID: !Ref CognitoUserPoolId
      Events:
        UpdateUserRoleAPI:
          Type: Api
          Properties:
            Path: /admin/users/{username}/role
            Method: PUT
            RestApiId: !Ref ClaimVisionAPI

  # Get Files Function (Paginated)
  GetFilesFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: files.get_files.lambda_handler
      Runtime: python3.12
      VpcConfig: !If
        - HasVpc
        - SubnetIds: !Ref SubnetIds
          SecurityGroupIds: !Ref SecurityGroupIds
        - !Ref AWS::NoValue
      CodeUri: src/
      Role: !GetAtt LambdaExecutionRole.Arn
      Policies:
        - Statement:
            Effect: Allow
            Action:
              - ssm:GetParameter
              - ssm:GetParameters
            Resource:
              - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${RDSEndpointSSMPath}
              - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${DBUsernameSSMPath}
              - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${DBPasswordSSMPath}
        - AWSLambdaBasicExecutionRole
      Environment:
        Variables:
          S3_BUCKET_NAME: !Ref S3BucketName
          DB_USERNAME: !Ref DBUsername
          DB_PASSWORD: !Ref DBPassword
          DB_HOST: !Ref DBEndpoint
          DB_NAME: claimvision
      Events:
        GetFilesAPI:
          Type: Api
          Properties:
            Path: /files
            Method: GET
            RestApiId: !Ref ClaimVisionAPI

        GetFilesByClaimAPI:
          Type: Api
          Properties:
            Path: /claims/{claim_id}/files
            Method: GET
            RestApiId: !Ref ClaimVisionAPI

  # Get Single File Metadata Function
  GetFileFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: files.get_file.lambda_handler
      Runtime: python3.12
      VpcConfig: !If
        - HasVpc
        - SubnetIds: !Ref SubnetIds
          SecurityGroupIds: !Ref SecurityGroupIds
        - !Ref AWS::NoValue
      CodeUri: src/
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
        - x86_64
      Policies:
        - Statement:
            Effect: Allow
            Action:
              - ssm:GetParameter
              - ssm:GetParameters
            Resource:
              - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${RDSEndpointSSMPath}
              - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${DBUsernameSSMPath}
              - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${DBPasswordSSMPath}
        - AWSLambdaBasicExecutionRole
      Environment:
        Variables:
          DB_USERNAME: !Ref DBUsername
          DB_PASSWORD: !Ref DBPassword
          DB_HOST: !Ref DBEndpoint
          DB_NAME: claimvision
          S3_BUCKET_NAME: !Ref S3BucketName
      Events:
        GetFileAPI:
          Type: Api
          Properties:
            Path: /files/{file_id}
            Method: GET
            RestApiId: !Ref ClaimVisionAPI

  # Update File Metadata Function (PATCH)
  UpdateFileMetadataFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: files.update_file_metadata.lambda_handler
      Runtime: python3.12
      VpcConfig: !If
        - HasVpc
        - SubnetIds: !Ref SubnetIds
          SecurityGroupIds: !Ref SecurityGroupIds
        - !Ref AWS::NoValue
      CodeUri: src/
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          DB_USERNAME: !Ref DBUsername
          DB_PASSWORD: !Ref DBPassword
          DB_HOST: !Ref DBEndpoint
          DB_NAME: claimvision
      Events:
        UpdateFileMetadataAPI:
          Type: Api
          Properties:
            Path: /files/{file_id}
            Method: PATCH
            RestApiId: !Ref ClaimVisionAPI

  # Replace File Function (PUT)
  #ReplaceFileFunction:
  #  Type: AWS::Serverless::Function
  #  Properties:
  #    Handler: files.replace_file.lambda_handler
  #    Runtime: python3.12
  #    VpcConfig: !If 
  #      - HasVpc
  #      - SubnetIds: !Ref SubnetIds
  #        SecurityGroupIds: !Ref SecurityGroupIds
  #      - !Ref AWS::NoValue
  #    CodeUri: src/
  #    Role: !GetAtt LambdaExecutionRole.Arn
  #    Architectures:
  #      - x86_64
  #    Environment:
  #      Variables:
  #        DB_USERNAME: !Ref DBUsername
  #        DB_PASSWORD: !Ref DBPassword
  #        DB_HOST: !Ref DBEndpoint
  #        DB_NAME: claimvision
  #        S3_BUCKET_NAME: !Ref S3BucketName

  #  Events:
  #    ReplaceFileAPI:
  #      Type: Api
  #      Properties:
  #        Path: /files/{file_id}
  #        Method: PUT
  #          RestApiId: !Ref ClaimVisionAPI

  # Delete File Function
  DeleteFileFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: files.delete_file.lambda_handler
      Runtime: python3.12
      VpcConfig: !If
        - HasVpc
        - SubnetIds: !Ref SubnetIds
          SecurityGroupIds: !Ref SecurityGroupIds
        - !Ref AWS::NoValue
      CodeUri: src/
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
        - x86_64
      Environment:
        Variables:
          DB_USERNAME: !Ref DBUsername
          DB_PASSWORD: !Ref DBPassword
          DB_HOST: !Ref DBEndpoint
          DB_NAME: claimvision
          S3_BUCKET_NAME: !Ref S3BucketName
      Events:
        DeleteFileAPI:
          Type: Api
          Properties:
            Path: /files/{file_id}
            Method: DELETE
            RestApiId: !Ref ClaimVisionAPI

    Policies:
      - AWSLambdaBasicExecutionRole
      - Statement:
          Effect: Allow
          Action:
            - ssm:GetParameter
            - ssm:GetParameters
          Resource:
            - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${RDSEndpointSSMPath}
            - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${DBUsernameSSMPath}
            - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${DBPasswordSSMPath}

  UploadFileFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: files.upload_file.lambda_handler
      Runtime: python3.12
      VpcConfig: !If
        - HasVpc
        - SubnetIds: !Ref SubnetIds
          SecurityGroupIds: !Ref SecurityGroupIds
        - !Ref AWS::NoValue
      CodeUri: src/
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
        - x86_64
      Events:
        UploadFileByClaimAPI:
          Type: Api
          Properties:
            Path: /claims/{claim_id}/files/upload
            Method: POST
            RestApiId: !Ref ClaimVisionAPI

      Environment:
        Variables:
          DB_USERNAME: !Ref DBUsername
          DB_PASSWORD: !Ref DBPassword
          DB_HOST: !Ref DBEndpoint
          DB_NAME: claimvision
          S3_BUCKET_NAME: !Ref S3BucketName
          SQS_UPLOAD_QUEUE_URL: !Ref FileUploadQueueURL
          BATCH_TRACKING_QUEUE_URL: !Ref BatchTrackingQueueURL
      Policies:
        - S3CrudPolicy:
            BucketName: !Sub claimvision-files-${AWS::AccountId}-${Env}
        - SQSSendMessagePolicy:
            QueueName: !Ref FileUploadQueueName
        - Statement:
            Effect: Allow
            Action:
              - sqs:SendMessage
              - sqs:GetQueueUrl
            Resource: !Ref FileUploadQueueARN

  GetUploadUrlFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: files.get_upload_url.lambda_handler
      Runtime: python3.12
      VpcConfig: !If
        - HasVpc
        - SubnetIds: !Ref SubnetIds
          SecurityGroupIds: !Ref SecurityGroupIds
        - !Ref AWS::NoValue
      CodeUri: src/
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
        - x86_64
      Events:
        GetUploadUrlAPI:
          Type: Api
          Properties:
            Path: /claims/{claim_id}/upload-url
            Method: POST
            RestApiId: !Ref ClaimVisionAPI
      Environment:
        Variables:
          DB_USERNAME: !Ref DBUsername
          DB_PASSWORD: !Ref DBPassword
          DB_HOST: !Ref DBEndpoint
          DB_NAME: claimvision
          S3_BUCKET_NAME: !Ref S3BucketName
          BATCH_TRACKING_QUEUE_URL: !Ref BatchTrackingQueueURL

  ProcessUploadedFileFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: files.process_uploaded_file.lambda_handler
      Runtime: python3.12
      VpcConfig: !If
        - HasVpc
        - SubnetIds: !Ref SubnetIds
          SecurityGroupIds: !Ref SecurityGroupIds
        - !Ref AWS::NoValue
      CodeUri: src/
      Role: !GetAtt ProcessFileLambdaRole.Arn
      Timeout: 30
      MemorySize: 512
      Architectures:
        - x86_64
      Events:
        SQSEvent:
          Type: SQS
          Properties:
            Queue: !Ref S3UploadNotificationQueueARN
            BatchSize: 10
      Environment:
        Variables:
          DB_USERNAME: !Ref DBUsername
          DB_PASSWORD: !Ref DBPassword
          DB_HOST: !Ref DBEndpoint
          DB_NAME: claimvision
          S3_BUCKET_NAME: !Ref S3BucketName
          SQS_UPLOAD_QUEUE_URL: !Ref FileUploadQueueURL
          EFS_MOUNT_PATH: /mnt/efs
          BATCH_TRACKING_QUEUE_URL: !Ref BatchTrackingQueueURL

  ProcessFileFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: files.process_file.lambda_handler
      Runtime: python3.12
      VpcConfig: !If
        - HasVpc
        - SubnetIds: !Ref SubnetIds
          SecurityGroupIds: !Ref SecurityGroupIds
        - !Ref AWS::NoValue
      CodeUri: src/
      Role: !GetAtt ProcessFileLambdaRole.Arn
      Architectures:
        - x86_64
      Events:
        SQSTrigger:
          Type: SQS
          Properties:
            Queue: !Ref FileUploadQueueARN
            BatchSize: 10
            MaximumBatchingWindowInSeconds: 30
      Environment:
        Variables:
          S3_BUCKET_NAME: !Ref S3BucketName
          SQS_ANALYSIS_QUEUE_URL: !Ref FileAnalysisQueueURL
          DB_USERNAME: !Ref DBUsername
          DB_PASSWORD: !Ref DBPassword
          DB_HOST: !Ref DBEndpoint
          DB_NAME: claimvision
          BATCH_TRACKING_QUEUE_URL: !Ref BatchTrackingQueueURL

  AnalyzeFileFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: files.analyze_file.lambda_handler
      Runtime: python3.12
      VpcConfig: !If
        - HasVpc
        - SubnetIds: !Ref SubnetIds
          SecurityGroupIds: !Ref SecurityGroupIds
        - !Ref AWS::NoValue
      CodeUri: src/
      Role: !GetAtt AnalyzeFileLambdaRole.Arn
      Architectures:
        - x86_64
      Events:
        SQSTrigger:
          Type: SQS
          Properties:
            Queue: !Ref FileAnalysisQueueARN
            BatchSize: 5
            MaximumBatchingWindowInSeconds: 60
      Environment:
        Variables:
          S3_BUCKET_NAME: !Ref S3BucketName
          MIN_CONFIDENCE: '70.0'
          DB_USERNAME: !Ref DBUsername
          DB_PASSWORD: !Ref DBPassword
          DB_HOST: !Ref DBEndpoint
          DB_NAME: claimvision
          BATCH_TRACKING_QUEUE_URL: !Ref BatchTrackingQueueURL

  RequestReportFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: reports.request_report.lambda_handler
      Runtime: python3.12
      Role: !GetAtt ReportingLambdaRole.Arn
      Environment:
        Variables:
          REPORT_REQUEST_QUEUE_URL: !Ref ReportRequestQueueURL
          SENDER_EMAIL: !Ref SenderEmail
      VpcConfig: !If
        - HasVpc
        - SubnetIds: !Ref SubnetIds
          SecurityGroupIds: !Ref SecurityGroupIds
        - !Ref AWS::NoValue
      Events:
        Api:
          Type: Api
          Properties:
            Path: /claims/{claim_id}/report
            Method: post
            RestApiId: !Ref ClaimVisionAPI

  AggregateReportFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: reports.aggregate_report.lambda_handler
      Runtime: python3.12
      Role: !GetAtt ReportingLambdaRole.Arn
      Environment:
        Variables:
          REPORT_REQUEST_QUEUE_URL: !Ref ReportRequestQueueURL
          FILE_ORGANIZATION_QUEUE_URL: !Ref FileOrganizationQueueURL
          REPORTS_BUCKET_NAME: !Ref ReportsBucketName
          SENDER_EMAIL: !Ref SenderEmail
      VpcConfig: !If
        - HasVpc
        - SubnetIds: !Ref SubnetIds
          SecurityGroupIds: !Ref SecurityGroupIds
        - !Ref AWS::NoValue
      Events:
        SQSTrigger:
          Type: SQS
          Properties:
            Queue: !Ref ReportRequestQueueARN
            BatchSize: 1
            Enabled: true

  OrganizeReportFilesFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: reports.organize_report_files.lambda_handler
      Runtime: python3.12
      Role: !GetAtt ReportingLambdaRole.Arn
      Environment:
        Variables:
          FILE_ORGANIZATION_QUEUE_URL: !Ref FileOrganizationQueueURL
          S3_BUCKET_NAME: !Ref S3BucketName
          EFS_ACCESS_POINT_ARN: !Ref EFSAccessPointARN
          EFS_FILE_SYSTEM_ID: !Ref EFSFileSystemId
          SENDER_EMAIL: !Ref SenderEmail
          DELIVER_REPORT_QUEUE_URL: !Ref DeliverReportQueueURL
      VpcConfig: !If
        - HasVpc
        - SubnetIds: !Ref SubnetIds
          SecurityGroupIds: !Ref SecurityGroupIds
        - !Ref AWS::NoValue
      FileSystemConfigs:
        - Arn: !Ref EFSAccessPointARN
          LocalMountPath: /mnt/reports
      Events:
        SQSTrigger:
          Type: SQS
          Properties:
            Queue: !Ref FileOrganizationQueueARN
            BatchSize: 1
            Enabled: true

  ReportZipperFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: reports.report_zipper.lambda_handler
      Runtime: python3.12
      Role: !GetAtt ReportingLambdaRole.Arn
      Environment:
        Variables:
          REPORTS_BUCKET_NAME: !Ref ReportsBucketName
          EMAIL_QUEUE_URL: !Ref EmailQueueURL
          EFS_ACCESS_POINT_ARN: !Ref EFSAccessPointARN
          EFS_FILE_SYSTEM_ID: !Ref EFSFileSystemId
      VpcConfig: !If
        - HasVpc
        - SubnetIds: !Ref SubnetIds
          SecurityGroupIds: !Ref SecurityGroupIds
        - !Ref AWS::NoValue
      FileSystemConfigs:
        - Arn: !Ref EFSAccessPointARN
          LocalMountPath: /mnt/reports
      Events:
        SQSTrigger:
          Type: SQS
          Properties:
            Queue: !Ref DeliverReportQueueARN
            BatchSize: 1
            Enabled: true

  EmailReportFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: reports.email_report.lambda_handler
      Runtime: python3.12
      Role: !GetAtt EmailReportLambdaRole.Arn
      Environment:
        Variables:
          SENDER_EMAIL: !Ref SenderEmail
      VpcConfig: !Ref AWS::NoValue
      Events:
        SQSTrigger:
          Type: SQS
          Properties:
            Queue: !Ref EmailQueueARN
            BatchSize: 1
            Enabled: true
  ## FIX THESE POLICIES!!!!! TODO: FINDME !!!!!!
  ReportingLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - !If
          - HasVpc
          - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
          - !Ref AWS::NoValue
      Policies:
        - PolicyName: ReportingLambdasPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                Resource:
                  - !Ref FileOrganizationQueueARN
                  - !Ref ReportRequestQueueARN
                  - !Ref DeliverReportQueueARN
                  - !Ref EmailQueueARN
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:ListBucket
                  - s3:HeadObject
                Resource:
                  - !Sub arn:aws:s3:::${ReportsBucketName}/*
                  - !Sub arn:aws:s3:::${ReportsBucketName}
                  - !Sub arn:aws:s3:::claimvision-files-${AWS::AccountId}-${Env}/*
                  - !Sub arn:aws:s3:::claimvision-files-${AWS::AccountId}-${Env}
              - Effect: Allow
                Action:
                  - elasticfilesystem:ClientMount
                  - elasticfilesystem:ClientWrite
                  - elasticfilesystem:ClientRootAccess
                Resource: '*'
        - !If
          - HasVpc
          - PolicyName: VPCAccessPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - ec2:CreateNetworkInterface
                    - ec2:DescribeNetworkInterfaces
                    - ec2:DeleteNetworkInterface
                    - ec2:AssignPrivateIpAddresses
                    - ec2:UnassignPrivateIpAddresses
                  Resource: '*'
          - !Ref AWS::NoValue

  EmailReportLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: EmailReportLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                Resource:
                  - !Ref EmailQueueARN
              - Effect: Allow
                Action:
                  - ses:SendEmail
                  - ses:SendRawEmail
                Resource: '*'

  APICertificate:
    Type: AWS::CertificateManager::Certificate
    Condition: CreateDNS
    Properties:
      DomainName: !Ref ApiDomainName
      ValidationMethod: DNS
      DomainValidationOptions:
        - DomainName: !Ref ApiDomainName
          HostedZoneId: !Ref HostedZoneId

  APIDomainName:
    Type: AWS::ApiGateway::DomainName
    Condition: CreateDNS
    Properties:
      DomainName: !Ref ApiDomainName
      RegionalCertificateArn: !Ref APICertificate
      EndpointConfiguration:
        Types:
          - REGIONAL

  APIBasePathMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Condition: CreateDNS
    Properties:
      DomainName: !Ref APIDomainName
      RestApiId: !Ref ClaimVisionAPI
      Stage: !Ref ClaimVisionAPI.Stage
    DependsOn:
      - ClaimVisionAPI
      - APIDomainName

  APIDNSRecord:
    Type: AWS::Route53::RecordSet
    Condition: CreateDNS
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !Ref ApiDomainName
      Type: A
      AliasTarget:
        DNSName: !GetAtt APIDomainName.RegionalDomainName
        HostedZoneId: !GetAtt APIDomainName.RegionalHostedZoneId
        EvaluateTargetHealth: false

  WebSocketCertificate:
    Type: AWS::CertificateManager::Certificate
    Condition: CreateDNS
    Properties:
      DomainName: !Ref WsDomainName
      ValidationMethod: DNS
      DomainValidationOptions:
        - DomainName: !Ref WsDomainName
          HostedZoneId: !Ref HostedZoneId

  WebSocketDomainName:
    Type: AWS::ApiGatewayV2::DomainName
    Condition: CreateDNS
    Properties:
      DomainName: !Ref WsDomainName
      DomainNameConfigurations:
        - EndpointType: REGIONAL
          CertificateArn: !Ref WebSocketCertificate

  WebSocketMapping:
    Type: AWS::ApiGatewayV2::ApiMapping
    Condition: CreateDNS
    Properties:
      DomainName: !Ref WebSocketDomainName
      ApiId: !Ref WebSocketApi
      Stage: !Ref Env
    DependsOn:
      - WebSocketApi
      - WebSocketDomainName
      - WebSocketStage

  WebSocketDNSRecord:
    Type: AWS::Route53::RecordSet
    Condition: CreateDNS
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !Ref WsDomainName
      Type: A
      AliasTarget:
        DNSName: !GetAtt WebSocketDomainName.RegionalDomainName
        HostedZoneId: !GetAtt WebSocketDomainName.RegionalHostedZoneId
        EvaluateTargetHealth: false

  WebSocketApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: ClaimVisionWebSocketApi
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: "$request.body.action"

  WebSocketStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref WebSocketApi
      StageName: !Ref Env
      DefaultRouteSettings:
        ThrottlingBurstLimit: 100
        ThrottlingRateLimit: 50
      Description: !Sub "${Env} Stage for WebSocket API"

  WebSocketConnectionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ClaimVision-WebSocketConnections-${Env}
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: connectionId
          AttributeType: S
        - AttributeName: userId
          AttributeType: S
      KeySchema:
        - AttributeName: connectionId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: UserIdIndex
          KeySchema:
            - AttributeName: userId
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true

  WebSocketConnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: websockets.connect_handler.lambda_handler
      Runtime: python3.12
      MemorySize: 256
      Timeout: 10
      Environment:
        Variables:
          CONNECTIONS_TABLE_NAME: !Ref WebSocketConnectionsTable
          COGNITO_USER_POOL_ID: !Ref CognitoUserPoolId
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref WebSocketConnectionsTable

  WebSocketDisconnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: websockets.disconnect_handler.lambda_handler
      Runtime: python3.12
      MemorySize: 256
      Timeout: 10
      Environment:
        Variables:
          CONNECTIONS_TABLE_NAME: !Ref WebSocketConnectionsTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref WebSocketConnectionsTable

  WebSocketDefaultFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: websockets.default_handler.lambda_handler
      Runtime: python3.12
      MemorySize: 256
      Timeout: 10
      Environment:
        Variables:
          CONNECTIONS_TABLE_NAME: !Ref WebSocketConnectionsTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref WebSocketConnectionsTable

  WebSocketNotifierFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: websockets.notifier_handler.lambda_handler
      Runtime: python3.12
      MemorySize: 256
      Timeout: 30
      Environment:
        Variables:
          CONNECTIONS_TABLE_NAME: !Ref WebSocketConnectionsTable
          WS_API_ENDPOINT: !If
            - CreateDNS
            - !Sub https://${WsDomainName}
            - !Sub https://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/${Env}
          OUTBOUND_QUEUE_URL: !Ref OutboundMessagesQueueURL
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref WebSocketConnectionsTable
        - SQSPollerPolicy:
            QueueName: !Ref OutboundMessagesQueueName
        - Statement:
            - Effect: Allow
              Action:
                - 'execute-api:ManageConnections'
              Resource: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/${Env}/POST/@connections/*
      Events:
        SQSEvent:
          Type: SQS
          Properties:
            Queue: !Ref OutboundMessagesQueueARN
            BatchSize: 10
            MaximumBatchingWindowInSeconds: 5

  WebSocketConnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebSocketConnectFunction.Arn}/invocations

  WebSocketDisconnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebSocketDisconnectFunction.Arn}/invocations

  WebSocketDefaultIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebSocketDefaultFunction.Arn}/invocations

  WebSocketConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: $connect
      AuthorizationType: NONE
      OperationName: ConnectRoute
      Target: !Sub integrations/${WebSocketConnectIntegration}

  WebSocketDisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: $disconnect
      AuthorizationType: NONE
      OperationName: DisconnectRoute
      Target: !Sub integrations/${WebSocketDisconnectIntegration}

  WebSocketDefaultRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: $default
      AuthorizationType: NONE
      OperationName: DefaultRoute
      Target: !Sub integrations/${WebSocketDefaultIntegration}

  WebSocketConnectPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref WebSocketConnectFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*/$connect

  WebSocketDisconnectPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref WebSocketDisconnectFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*/$disconnect

  WebSocketDefaultPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref WebSocketDefaultFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*/$default

  BatchTrackingTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${Env}-batch-tracking
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: batchId
          AttributeType: S
        - AttributeName: itemId
          AttributeType: S
      KeySchema:
        - AttributeName: batchId
          KeyType: HASH
        - AttributeName: itemId
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: ItemIdIndex
          KeySchema:
            - AttributeName: itemId
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
      Tags:
        - Key: Environment
          Value: !Ref Env

  BatchTrackerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: batch.tracker_handler.lambda_handler
      Runtime: python3.12
      MemorySize: 256
      Timeout: 30
      Environment:
        Variables:
          BATCH_TRACKING_TABLE: !Ref BatchTrackingTable
          OUTBOUND_QUEUE_URL: !Ref OutboundMessagesQueueURL
          BATCH_TRACKING_QUEUE_URL: !Ref BatchTrackingQueueURL
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref BatchTrackingTable
        - SQSSendMessagePolicy:
            QueueName: !GetAtt OutboundMessagesQueue.QueueName
      Events:
        BatchTrackingEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt BatchTrackingQueue.Arn
            BatchSize: 10

Outputs:
  #  Print API Gateway URL After Deployment
  ApiGatewayInvokeURL:
    Description: API Gateway Invoke URL
    Value: !Sub https://${ClaimVisionAPI}.execute-api.${AWS::Region}.amazonaws.com/dev
  CustomDomainURL:
    Condition: CreateDNS
    Description: Custom Domain URL
    Value: !Sub https://${ApiDomainName}
  WebSocketApiEndpoint:
    Description: "WebSocket API endpoint URL"
    Value: !If
      - CreateDNS
      - !Sub wss://${WsDomainName}
      - !Sub wss://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/${Env}
  
  WebSocketConnectionsTableName:
    Description: Name of the DynamoDB table for WebSocket connections
    Value: !Ref WebSocketConnectionsTable

  BatchTrackingTableName:
    Description: "Batch Tracking DynamoDB Table Name"
    Value: !Ref BatchTrackingTable

  BatchTrackingQueueURL:
    Description: "Batch Tracking SQS Queue URL"
    Value: !Ref BatchTrackingQueueURL

  BatchTrackingQueueARN:
    Description: "Batch Tracking SQS Queue ARN"
    Value: !Ref BatchTrackingQueueARN