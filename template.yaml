AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Parameters:
  Env:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - prod
    Description: Environment name
  S3BucketNameSSMPath:
    Type: String
    Default: /terraform/s3/bucket_name
    Description: SSM Parameter Store path for S3 bucket name
  S3BucketName:
    Type: String
    Default: claimvision-files-dev
    Description: S3 bucket name for file storage
  CognitoUserPoolId:
    Type: String
    Description: The Cognito User Pool ID from the external stack
  RDSEndpointSSMPath:
    Type: String
    Default: /terraform/database/host
    Description: SSM Parameter Store path for RDS endpoint
  DBUsernameSSMPath:
    Type: String
    Default: /terraform/database/username
    Description: SSM Parameter Store path for database username
  DBPasswordSSMPath:
    Type: String
    Default: /terraform/database/password
    Description: SSM Parameter Store path for database password
  DBUsername:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /terraform/database/username
  DBPassword:
    Type: AWS::SSM::Parameter::Value<SecureString>
    Default: /terraform/database/password
  DBEndpoint:
    Type: String
    Description: Database endpoint
  FileUploadQueueURL:
    Type: String
    Description: URL of the file upload SQS queue
  FileUploadQueueARN:
    Type: String
    Description: ARN of the file upload SQS queue
  FileUploadQueueName:
    Type: String
    Description: Name of the file upload SQS queue
  FileAnalysisQueueURL:
    Type: String
    Description: URL of the file analysis SQS queue
  FileAnalysisQueueARN:
    Type: String
    Description: ARN of the file analysis SQS queue
  FileAnalysisQueueName:
    Type: String
    Description: Name of the file analysis SQS queue
  UserRegistrationQueueURL:
    Type: String
    Description: URL of the user registration SQS queue
  UserRegistrationQueueARN:
    Type: String
    Description: ARN of the user registration SQS queue
  UserRegistrationQueueName:
    Type: String
    Description: Name of the user registration SQS queue
  CognitoUpdateQueueURL:
    Type: String
    Description: URL of the Cognito update SQS queue
  CognitoUpdateQueueARN:
    Type: String
    Description: ARN of the Cognito update SQS queue
  CognitoUpdateQueueName:
    Type: String
    Description: Name of the Cognito update SQS queue
  VpcId:
    Type: String
    Default: ""
    Description: VPC ID for Lambda functions
  SubnetIds:
    Type: CommaDelimitedList
    Default: ""
    Description: Subnet IDs for Lambda functions (comma-delimited)
  PublicSubnet1:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /terraform/networking/public_subnet_1
    Description: Public Subnet 1 from SSM
  PublicSubnet2:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /terraform/networking/public_subnet_2
    Description: Public Subnet 2 from SSM
  SecurityGroupIds:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /terraform/networking/rds_sg_id
    Description: Security Group ID for Lambda functions
  RouteTableIds:
    Type: String
    Default: ""
    Description: Route Table ID for Lambda functions
  EnableDNS:
    Type: String
    Default: false
    AllowedValues:
      - true
      - false
    Description: "Enable Route53 + API Gateway domain setup"
  HostedZoneId:
    Type: String
    Description: "Route 53 Hosted Zone ID"
  ApiDomainName:
    Type: String
    Description: "Fully qualified domain name for the API"
  FrontendOrigin:
    Type: String
    Description: "Frontend origin URL"
Conditions:
  IsDev: !Equals [!Ref Env, "dev"]
  HasVpc: 
    Fn::Not:
      - Fn::Equals:
          - !Ref VpcId
          - ""
  CreateDNS: !Equals [ !Ref EnableDNS, true ]

Globals:
  Function:
    Timeout: 30
    MemorySize: 128
    Runtime: python3.12
    Environment:
      Variables:
        DB_USERNAME: !Ref DBUsername
        DB_PASSWORD: !Ref DBPassword
        DB_HOST: !Ref DBEndpoint
        DB_NAME: claimvision
        USER_REGISTRATION_QUEUE_URL: !Ref UserRegistrationQueueURL
        COGNITO_UPDATE_QUEUE_URL: !Ref CognitoUpdateQueueURL
        FRONTEND_ORIGIN: !Ref FrontendOrigin
    VpcConfig: !If 
      - HasVpc
      - SubnetIds:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
        SecurityGroupIds: !Ref SecurityGroupIds
      - !Ref AWS::NoValue
  Api:
    Auth:
      DefaultAuthorizer: JwtAuthorizer
      AddDefaultAuthorizerToCorsPreflight: false

Resources:
  # IAM Role for Lambda functions
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - !If
          - HasVpc
          - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
          - !Ref AWS::NoValue
      Policies:
        - PolicyName: SSMParameterAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                  - ssm:GetParameters
                Resource:
                  - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${DBUsernameSSMPath}
                  - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${DBPasswordSSMPath}
                  - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${RDSEndpointSSMPath}
                  - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${S3BucketNameSSMPath}
        - PolicyName: SQSAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                  - sqs:GetQueueUrl
                Resource:
                  - !Sub arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:${FileUploadQueueName}
                  - !Sub arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:${FileAnalysisQueueName}
        - PolicyName: CognitoAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cognito-idp:SignUp
                  - cognito-idp:AdminUpdateUserAttributes
                  - cognito-idp:AdminConfirmSignUp
                  - cognito-idp:AdminInitiateAuth
                  - cognito-idp:AdminRespondToAuthChallenge
                  - cognito-idp:AdminGetUser
                Resource: !Sub arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${CognitoUserPoolId}
        - PolicyName: DBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - rds-db:connect
                Resource: '*'
        - !If
          - HasVpc
          - PolicyName: VPCAccessPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - ec2:CreateNetworkInterface
                    - ec2:DescribeNetworkInterfaces
                    - ec2:DeleteNetworkInterface
                    - ec2:AssignPrivateIpAddresses
                    - ec2:UnassignPrivateIpAddresses
                  Resource: '*'
          - !Ref AWS::NoValue

  # IAM Role for Process File Lambda
  ProcessFileLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - !If
          - HasVpc
          - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
          - !Ref AWS::NoValue
      Policies:
        - PolicyName: SQSAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                  - sqs:ChangeMessageVisibility
                Resource:
                  - !Ref FileUploadQueueARN
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                Resource:
                  - !Ref FileAnalysisQueueARN
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:ListBucket
                Resource:
                  - !Sub arn:aws:s3:::claimvision-files-${AWS::AccountId}-${Env}
                  - !Sub arn:aws:s3:::claimvision-files-${AWS::AccountId}-${Env}/*
        - PolicyName: DBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - rds-db:connect
                Resource: '*'
        - !If
          - HasVpc
          - PolicyName: VPCAccessPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - ec2:CreateNetworkInterface
                    - ec2:DescribeNetworkInterfaces
                    - ec2:DeleteNetworkInterface
                    - ec2:AssignPrivateIpAddresses
                    - ec2:UnassignPrivateIpAddresses
                  Resource: '*'
          - !Ref AWS::NoValue

  # IAM Role for Analyze File Lambda
  AnalyzeFileLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - !If
          - HasVpc
          - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
          - !Ref AWS::NoValue
      Policies:
        - PolicyName: SQSAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                  - sqs:ChangeMessageVisibility
                Resource:
                  - !Ref FileAnalysisQueueARN
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - !Sub arn:aws:s3:::claimvision-files-${AWS::AccountId}-${Env}
                  - !Sub arn:aws:s3:::claimvision-files-${AWS::AccountId}-${Env}/*
        - PolicyName: DBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - rds-db:connect
                Resource: '*'
        - PolicyName: RekognitionAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - rekognition:DetectLabels
                  - rekognition:DetectText
                Resource: '*'
        - !If
          - HasVpc
          - PolicyName: VPCAccessPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - ec2:CreateNetworkInterface
                    - ec2:DescribeNetworkInterfaces
                    - ec2:DeleteNetworkInterface
                    - ec2:AssignPrivateIpAddresses
                    - ec2:UnassignPrivateIpAddresses
                  Resource: '*'
          - !Ref AWS::NoValue

  # IAM Role for RegisterDb Lambda
  RegisterDbLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - !If
          - HasVpc
          - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
          - !Ref AWS::NoValue
      Policies:
        - PolicyName: SQSAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                  - sqs:ChangeMessageVisibility
                Resource:
                  - !Ref UserRegistrationQueueARN
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                Resource: !Ref CognitoUpdateQueueARN
        - PolicyName: DBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - rds-db:connect
                Resource: '*'
        - !If
          - HasVpc
          - PolicyName: VPCAccessPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - ec2:CreateNetworkInterface
                    - ec2:DescribeNetworkInterfaces
                    - ec2:DeleteNetworkInterface
                    - ec2:AssignPrivateIpAddresses
                    - ec2:UnassignPrivateIpAddresses
                  Resource: '*'
          - !Ref AWS::NoValue

  # IAM Role for RegisterCognito Lambda
  RegisterCognitoLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: CognitoAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cognito-idp:SignUp
                Resource: !Sub arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${CognitoUserPoolId}
        - PolicyName: SQSAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                Resource: !Ref UserRegistrationQueueARN

  ###API###
  # API Gateway
  ClaimVisionAPI:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub ClaimVisionAPI-${Env}
      StageName: dev
      Auth:
        DefaultAuthorizer: JwtAuthorizer
        AddDefaultAuthorizerToCorsPreflight: false
        Authorizers:
          JwtAuthorizer:
            FunctionArn: !GetAtt JwtAuthorizerFunction.Arn
            Identity:
              Header: Authorization
              ReauthorizeEvery: 0

  ###Lambdas###

  ##This better work##
  PreflightFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: misc.preflight.lambda_handler
      Runtime: python3.12
      CodeUri: src/
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        CatchAllOptions:
          Type: Api
          Properties:
            Path: /{proxy+}
            Method: OPTIONS
            RestApiId: !Ref ClaimVisionAPI
            Auth:
              Authorizer: NONE
  ##Auth##
  # JWT Authorizer Function
  JwtAuthorizerFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: claimvision-jwt-authorizer
      Handler: auth.lambda_authorizer.lambda_handler
      Runtime: python3.12
      CodeUri: src/
      Role: !GetAtt LambdaExecutionRole.Arn
      Policies:
        - AWSLambdaBasicExecutionRole
      Timeout: 5
      Environment:
        Variables:
          COGNITO_USER_POOL_CLIENT_ID: !If
            - IsDev
            - !ImportValue CognitoUserPoolClientId-dev
            - !ImportValue CognitoUserPoolClientId-prod
          COGNITO_USER_POOL_ID: !If
            - IsDev
            - !ImportValue CognitoUserPoolId-dev
            - !ImportValue CognitoUserPoolId-prod
      VpcConfig: !Ref AWS::NoValue
  # Login Function
  LoginFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: auth.login.lambda_handler
      Runtime: python3.12
      CodeUri: src/
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          COGNITO_USER_POOL_CLIENT_ID: !If
            - IsDev
            - !ImportValue CognitoUserPoolClientId-dev
            - !ImportValue CognitoUserPoolClientId-prod
          COGNITO_USER_POOL_ID: !If
            - IsDev
            - !ImportValue CognitoUserPoolId-dev
            - !ImportValue CognitoUserPoolId-prod
      VpcConfig: !Ref AWS::NoValue
      Policies:
        - AWSLambdaBasicExecutionRole
        - Statement:
            Effect: Allow
            Action:
              - cognito-idp:InitiateAuth
              - cognito-idp:AdminGetUser
            Resource: !Sub arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${CognitoUserPoolId}
      Events:
        LoginAPI:
          Type: Api
          Properties:
            Path: /auth/login
            Method: POST
            RestApiId: !Ref ClaimVisionAPI
            Auth:
              Authorizer: NONE
  # User Registration with Cognito
  RegisterCognitoFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: auth.register_cognito.lambda_handler
      Runtime: python3.12
      Role: !GetAtt RegisterCognitoLambdaRole.Arn
      Environment:
        Variables:
          COGNITO_USER_POOL_CLIENT_ID: !If
            - IsDev
            - !ImportValue CognitoUserPoolClientId-dev
            - !ImportValue CognitoUserPoolClientId-prod
          COGNITO_USER_POOL_ID: !If
            - IsDev
            - !ImportValue CognitoUserPoolId-dev
            - !ImportValue CognitoUserPoolId-prod
          USER_REGISTRATION_QUEUE_URL: !Ref UserRegistrationQueueURL
      VpcConfig: !Ref AWS::NoValue
      Policies:
        - AWSLambdaBasicExecutionRole
        - Statement:
            Effect: Allow
            Action:
              - cognito-idp:SignUp
            Resource: !Sub arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${CognitoUserPoolId}
      Events:
        RegisterAPI:
          Type: Api
          Properties:
            Path: /auth/register
            Method: POST
            RestApiId: !Ref ClaimVisionAPI
            Auth:
              Authorizer: NONE
  # User Registration with Database
  RegisterDbFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: auth.register_db.lambda_handler
      Runtime: python3.12
      Role: !GetAtt RegisterDbLambdaRole.Arn
      Environment:
        Variables:
          DB_USERNAME: !Ref DBUsername
          DB_PASSWORD: !Ref DBPassword
          DB_HOST: !Ref DBEndpoint
          DB_NAME: claimvision
          COGNITO_UPDATE_QUEUE_URL: !Ref CognitoUpdateQueueURL
      Events:
        SQSTrigger:
          Type: SQS
          Properties:
            Queue: !Ref UserRegistrationQueueARN
            BatchSize: 10
            Enabled: true

  # Confirm Email
  ConfirmFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: auth.confirm.lambda_handler
      Runtime: python3.12
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          COGNITO_USER_POOL_CLIENT_ID: !If
            - IsDev
            - !ImportValue CognitoUserPoolClientId-dev
            - !ImportValue CognitoUserPoolClientId-prod
          COGNITO_USER_POOL_ID: !If
            - IsDev
            - !ImportValue CognitoUserPoolId-dev
            - !ImportValue CognitoUserPoolId-prod
      VpcConfig: !Ref AWS::NoValue
      Policies:
        - AWSLambdaBasicExecutionRole
        - Statement:
            Effect: Allow
            Action:
              - cognito-idp:ConfirmSignUp
            Resource: !Sub arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${CognitoUserPoolId}
      Events:
        ConfirmAPI:
          Type: Api
          Properties:
            Path: /auth/confirm
            Method: POST
            RestApiId: !Ref ClaimVisionAPI
            Auth:
              Authorizer: NONE
  # Resend Email Verification
  ResendConfirmationFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: auth.resend_confirmation.lambda_handler
      Runtime: python3.12
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          COGNITO_USER_POOL_CLIENT_ID: !If
            - IsDev
            - !ImportValue CognitoUserPoolClientId-dev
            - !ImportValue CognitoUserPoolClientId-prod
          COGNITO_USER_POOL_ID: !If
            - IsDev
            - !ImportValue CognitoUserPoolId-dev
            - !ImportValue CognitoUserPoolId-prod
      Policies:
        - AWSLambdaBasicExecutionRole
        - Statement:
            Effect: Allow
            Action:
              - cognito-idp:ResendConfirmationCode
            Resource: !Sub arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${CognitoUserPoolId}
      Events:
        ResendConfirmationAPI:
          Type: Api
          Properties:
            Path: /auth/resend-confirmation
            Method: POST
            RestApiId: !Ref ClaimVisionAPI
            Auth:
              Authorizer: NONE

  # Dev bypass email verification
  PreSignUpFunction:
    Type: AWS::Serverless::Function
    Condition: IsDev
    Properties:
      CodeUri: src/
      Handler: auth.pre_signup.lambda_handler
      Runtime: python3.12
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          COGNITO_USER_POOL_ID: !If
            - IsDev
            - !ImportValue CognitoUserPoolId-dev
            - !ImportValue CognitoUserPoolId-prod
          AUTO_CONFIRM_USER: !If
            - IsDev
            - 'true'
            - 'false'
      Policies:
        - AWSLambdaBasicExecutionRole
        - Statement:
            Effect: Allow
            Action:
              - cognito-idp:AdminUpdateUserAttributes
            Resource: !Sub arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${CognitoUserPoolId}

  # Get Claims Function
  GetClaimsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: claims.get_claims.lambda_handler
      Runtime: python3.12
      VpcConfig: !If 
        - HasVpc
        - SubnetIds: !Ref SubnetIds
          SecurityGroupIds: !Ref SecurityGroupIds
        - !Ref AWS::NoValue
      Policies:
        - Statement:
            Effect: Allow
            Action:
              - ssm:GetParameter
              - ssm:GetParameters
            Resource:
              - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${RDSEndpointSSMPath}
              - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${DBUsernameSSMPath}
              - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${DBPasswordSSMPath}
        - AWSLambdaBasicExecutionRole
      Environment:
        Variables:
          DB_USERNAME: !Ref DBUsername
          DB_PASSWORD: !Ref DBPassword
          DB_HOST: !Ref DBEndpoint
          DB_NAME: claimvision
      Events:
        GetClaimsAPI:
          Type: Api
          Properties:
            Path: /claims
            Method: GET
            RestApiId: !Ref ClaimVisionAPI
            Auth:
              Authorizer: JwtAuthorizer

  # Create Claim Function
  CreateClaimFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: claims.create_claim.lambda_handler
      Runtime: python3.12
      VpcConfig: !If 
        - HasVpc
        - SubnetIds: !Ref SubnetIds
          SecurityGroupIds: !Ref SecurityGroupIds
        - !Ref AWS::NoValue
      CodeUri: src/
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          DB_USERNAME: !Ref DBUsername
          DB_PASSWORD: !Ref DBPassword
          DB_HOST: !Ref DBEndpoint
          DB_NAME: claimvision
      Events:
        CreateClaimAPI:
          Type: Api
          Properties:
            Path: /claims
            Method: POST
            RestApiId: !Ref ClaimVisionAPI
            Auth:
              Authorizer: JwtAuthorizer

  # Get Claim Function
  GetClaimFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: claims.get_claim.lambda_handler
      Runtime: python3.12
      VpcConfig: !If 
        - HasVpc
        - SubnetIds: !Ref SubnetIds
          SecurityGroupIds: !Ref SecurityGroupIds
        - !Ref AWS::NoValue
      CodeUri: src/
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          DB_USERNAME: !Ref DBUsername
          DB_PASSWORD: !Ref DBPassword
          DB_HOST: !Ref DBEndpoint
          DB_NAME: claimvision
      Events:
        GetClaimAPI:
          Type: Api
          Properties:
            Path: /claims/{claim_id}
            Method: GET
            RestApiId: !Ref ClaimVisionAPI
            Auth:
              Authorizer: JwtAuthorizer

  # Update Claim Function
  UpdateClaimFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: claims.update_claim.lambda_handler
      Runtime: python3.12
      VpcConfig: !If 
        - HasVpc
        - SubnetIds: !Ref SubnetIds
          SecurityGroupIds: !Ref SecurityGroupIds
        - !Ref AWS::NoValue
      CodeUri: src/
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          DB_USERNAME: !Ref DBUsername
          DB_PASSWORD: !Ref DBPassword
          DB_HOST: !Ref DBEndpoint
          DB_NAME: claimvision
      Events:
        UpdateClaimAPI:
          Type: Api
          Properties:
            Path: /claims/{claim_id}
            Method: PUT
            RestApiId: !Ref ClaimVisionAPI
            Auth:
              Authorizer: JwtAuthorizer

  # Delete Claim Function
  DeleteClaimFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: claims.delete_claim.lambda_handler
      Runtime: python3.12
      VpcConfig: !If 
        - HasVpc
        - SubnetIds: !Ref SubnetIds
          SecurityGroupIds: !Ref SecurityGroupIds
        - !Ref AWS::NoValue
      CodeUri: src/
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          DB_USERNAME: !Ref DBUsername
          DB_PASSWORD: !Ref DBPassword
          DB_HOST: !Ref DBEndpoint
          DB_NAME: claimvision
      Events:
        DeleteClaimAPI:
          Type: Api
          Properties:
            Path: /claims/{claim_id}
            Method: DELETE
            RestApiId: !Ref ClaimVisionAPI
            Auth:
              Authorizer: JwtAuthorizer

  # Create Item Function
  CreateItemFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: items.create_item.lambda_handler
      Runtime: python3.12
      VpcConfig: !If 
        - HasVpc
        - SubnetIds: !Ref SubnetIds
          SecurityGroupIds: !Ref SecurityGroupIds
        - !Ref AWS::NoValue
      CodeUri: src/
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          DB_USERNAME: !Ref DBUsername
          DB_PASSWORD: !Ref DBPassword
          DB_HOST: !Ref DBEndpoint
          DB_NAME: claimvision
      Events:
        CreateItemAPI:
          Type: Api
          Properties:
            Path: /claims/{claim_id}/items
            Method: POST
            RestApiId: !Ref ClaimVisionAPI
            Auth:
              Authorizer: JwtAuthorizer
  # Get Items Function
  GetItemsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: items.get_items.lambda_handler
      Runtime: python3.12
      VpcConfig: !If 
        - HasVpc
        - SubnetIds: !Ref SubnetIds
          SecurityGroupIds: !Ref SecurityGroupIds
        - !Ref AWS::NoValue
      CodeUri: src/
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          DB_USERNAME: !Ref DBUsername
          DB_PASSWORD: !Ref DBPassword
          DB_HOST: !Ref DBEndpoint
          DB_NAME: claimvision
      Events:
        GetItemsAPI:
          Type: Api
          Properties:
            Path: /claims/{claim_id}/items
            Method: GET
            RestApiId: !Ref ClaimVisionAPI
            Auth:
              Authorizer: JwtAuthorizer

  # Get Item Function
  GetItemFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: items.get_item.lambda_handler
      Runtime: python3.12
      VpcConfig: !If 
        - HasVpc
        - SubnetIds: !Ref SubnetIds
          SecurityGroupIds: !Ref SecurityGroupIds
        - !Ref AWS::NoValue
      CodeUri: src/
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          DB_USERNAME: !Ref DBUsername
          DB_PASSWORD: !Ref DBPassword
          DB_HOST: !Ref DBEndpoint
          DB_NAME: claimvision
      Events:
        GetItemAPI:
          Type: Api
          Properties:
            Path: /items/{item_id}
            Method: GET
            RestApiId: !Ref ClaimVisionAPI
            Auth:
              Authorizer: JwtAuthorizer

  # Update Item Function
  UpdateItemFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: items.update_item.lambda_handler
      Runtime: python3.12
      VpcConfig: !If 
        - HasVpc
        - SubnetIds: !Ref SubnetIds
          SecurityGroupIds: !Ref SecurityGroupIds
        - !Ref AWS::NoValue
      CodeUri: src/
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          DB_USERNAME: !Ref DBUsername
          DB_PASSWORD: !Ref DBPassword
          DB_HOST: !Ref DBEndpoint
          DB_NAME: claimvision
      Events:
        UpdateItemAPI:
          Type: Api
          Properties:
            Path: /items/{item_id}
            Method: PUT
            RestApiId: !Ref ClaimVisionAPI
            Auth:
              Authorizer: JwtAuthorizer

  # Delete Item Function
  DeleteItemFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: items.delete_item.lambda_handler
      Runtime: python3.12
      VpcConfig: !If 
        - HasVpc
        - SubnetIds: !Ref SubnetIds
          SecurityGroupIds: !Ref SecurityGroupIds
        - !Ref AWS::NoValue
      CodeUri: src/
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          DB_USERNAME: !Ref DBUsername
          DB_PASSWORD: !Ref DBPassword
          DB_HOST: !Ref DBEndpoint
          DB_NAME: claimvision
      Events:
        DeleteItemAPI:
          Type: Api
          Properties:
            Path: /items/{item_id}
            Method: DELETE
            RestApiId: !Ref ClaimVisionAPI
            Auth:
              Authorizer: JwtAuthorizer


  # Associate File with Item Function
  AssociateFileFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: items.associate_file.lambda_handler
      Runtime: python3.12
      VpcConfig: !If 
        - HasVpc
        - SubnetIds: !Ref SubnetIds
          SecurityGroupIds: !Ref SecurityGroupIds
        - !Ref AWS::NoValue
      CodeUri: src/
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          DB_USERNAME: !Ref DBUsername
          DB_PASSWORD: !Ref DBPassword
          DB_HOST: !Ref DBEndpoint
          DB_NAME: claimvision
      Events:
        AssociateFileAPI:
          Type: Api
          Properties:
            Path: /items/{item_id}/files
            Method: POST
            RestApiId: !Ref ClaimVisionAPI
            Auth:
              Authorizer: JwtAuthorizer


  # Inherit Labels from File Function
  InheritLabelsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: items.inherit_labels.lambda_handler
      Runtime: python3.12
      VpcConfig: !If 
        - HasVpc
        - SubnetIds: !Ref SubnetIds
          SecurityGroupIds: !Ref SecurityGroupIds
        - !Ref AWS::NoValue
      CodeUri: src/
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          DB_USERNAME: !Ref DBUsername
          DB_PASSWORD: !Ref DBPassword
          DB_HOST: !Ref DBEndpoint
          DB_NAME: claimvision
      Events:
        InheritLabelsAPI:
          Type: Api
          Properties:
            Path: /items/{item_id}/inherit/{file_id}
            Method: POST
            RestApiId: !Ref ClaimVisionAPI
            Auth:
              Authorizer: JwtAuthorizer


  # Manage Item Labels Function
  ManageLabelsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: items.manage_labels.lambda_handler
      Runtime: python3.12
      VpcConfig: !If 
        - HasVpc
        - SubnetIds: !Ref SubnetIds
          SecurityGroupIds: !Ref SecurityGroupIds
        - !Ref AWS::NoValue
      CodeUri: src/
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          DB_USERNAME: !Ref DBUsername
          DB_PASSWORD: !Ref DBPassword
          DB_HOST: !Ref DBEndpoint
          DB_NAME: claimvision
      Events:
        ManageLabelsAPI:
          Type: Api
          Properties:
            Path: /items/{item_id}/labels
            Method: PATCH
            RestApiId: !Ref ClaimVisionAPI
            Auth:
              Authorizer: JwtAuthorizer

  # Create Label Function
  CreateLabelFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: labels.create_label.lambda_handler
      Runtime: python3.12
      VpcConfig: !If 
        - HasVpc
        - SubnetIds: !Ref SubnetIds
          SecurityGroupIds: !Ref SecurityGroupIds
        - !Ref AWS::NoValue
      CodeUri: src/
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          DB_USERNAME: !Ref DBUsername
          DB_PASSWORD: !Ref DBPassword
          DB_HOST: !Ref DBEndpoint
          DB_NAME: claimvision
      Events:
        CreateLabelAPI:
          Type: Api
          Properties:
            Path: /files/{file_id}/labels
            Method: POST
            RestApiId: !Ref ClaimVisionAPI
            Auth:
              Authorizer: JwtAuthorizer

  # Get Labels Function
  GetLabelsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: labels.get_labels.lambda_handler
      Runtime: python3.12
      VpcConfig: !If 
        - HasVpc
        - SubnetIds: !Ref SubnetIds
          SecurityGroupIds: !Ref SecurityGroupIds
        - !Ref AWS::NoValue
      CodeUri: src/
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          DB_USERNAME: !Ref DBUsername
          DB_PASSWORD: !Ref DBPassword
          DB_HOST: !Ref DBEndpoint
          DB_NAME: claimvision
      Events:
        GetLabelsAPI:
          Type: Api
          Properties:
            Path: /files/{file_id}/labels
            Method: GET
            RestApiId: !Ref ClaimVisionAPI
            Auth:
              Authorizer: JwtAuthorizer


  # Delete Label Function
  DeleteLabelFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: labels.delete_label.lambda_handler
      Runtime: python3.12
      VpcConfig: !If 
        - HasVpc
        - SubnetIds: !Ref SubnetIds
          SecurityGroupIds: !Ref SecurityGroupIds
        - !Ref AWS::NoValue
      CodeUri: src/
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          DB_USERNAME: !Ref DBUsername
          DB_PASSWORD: !Ref DBPassword
          DB_HOST: !Ref DBEndpoint
          DB_NAME: claimvision
      Events:
        DeleteLabelAPI:
          Type: Api
          Properties:
            Path: /files/{file_id}/labels/{label_id}
            Method: DELETE
            RestApiId: !Ref ClaimVisionAPI
            Auth:
              Authorizer: JwtAuthorizer

  # Remove Label Function
  RemoveLabelFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: labels.remove_label.lambda_handler
      Runtime: python3.12
      VpcConfig: !If 
        - HasVpc
        - SubnetIds: !Ref SubnetIds
          SecurityGroupIds: !Ref SecurityGroupIds
        - !Ref AWS::NoValue
      CodeUri: src/
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          DB_USERNAME: !Ref DBUsername
          DB_PASSWORD: !Ref DBPassword
          DB_HOST: !Ref DBEndpoint
          DB_NAME: claimvision
      Events:
        RemoveLabelAPI:
          Type: Api
          Properties:
            Path: /files/{file_id}/labels/{label_id}/remove
            Method: PUT
            RestApiId: !Ref ClaimVisionAPI
            Auth:
              Authorizer: JwtAuthorizer

  # Restore Label Function
  RestoreLabelFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: labels.restore_label.lambda_handler
      Runtime: python3.12
      VpcConfig: !If 
        - HasVpc
        - SubnetIds: !Ref SubnetIds
          SecurityGroupIds: !Ref SecurityGroupIds
        - !Ref AWS::NoValue
      CodeUri: src/
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          DB_USERNAME: !Ref DBUsername
          DB_PASSWORD: !Ref DBPassword
          DB_HOST: !Ref DBEndpoint
          DB_NAME: claimvision
      Events:
        RestoreLabelAPI:
          Type: Api
          Properties:
            Path: /files/{file_id}/labels/{label_id}/restore
            Method: PUT
            RestApiId: !Ref ClaimVisionAPI
            Auth:
              Authorizer: JwtAuthorizer

  # Room Functions
  # Create Room Function
  CreateRoomFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: rooms.create_room.lambda_handler
      Runtime: python3.12
      VpcConfig: !If 
        - HasVpc
        - SubnetIds: !Ref SubnetIds
          SecurityGroupIds: !Ref SecurityGroupIds
        - !Ref AWS::NoValue
      CodeUri: src/
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          DB_USERNAME: !Ref DBUsername
          DB_PASSWORD: !Ref DBPassword
          DB_HOST: !Ref DBEndpoint
          DB_NAME: claimvision
      Events:
        CreateRoomAPI:
          Type: Api
          Properties:
            Path: /claims/{claim_id}/rooms
            Method: POST
            RestApiId: !Ref ClaimVisionAPI
            Auth:
              Authorizer: JwtAuthorizer
  # Get Rooms Function
  GetRoomsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: rooms.get_rooms.lambda_handler
      Runtime: python3.12
      VpcConfig: !If 
        - HasVpc
        - SubnetIds: !Ref SubnetIds
          SecurityGroupIds: !Ref SecurityGroupIds
        - !Ref AWS::NoValue
      CodeUri: src/
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          DB_USERNAME: !Ref DBUsername
          DB_PASSWORD: !Ref DBPassword
          DB_HOST: !Ref DBEndpoint
          DB_NAME: claimvision
      Events:
        GetRoomsAPI:
          Type: Api
          Properties:
            Path: /claims/{claim_id}/rooms
            Method: GET
            RestApiId: !Ref ClaimVisionAPI
            Auth:
              Authorizer: JwtAuthorizer

  # Get Room Function
  GetRoomFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: rooms.get_room.lambda_handler
      Runtime: python3.12
      VpcConfig: !If 
        - HasVpc
        - SubnetIds: !Ref SubnetIds
          SecurityGroupIds: !Ref SecurityGroupIds
        - !Ref AWS::NoValue
      CodeUri: src/
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          DB_USERNAME: !Ref DBUsername
          DB_PASSWORD: !Ref DBPassword
          DB_HOST: !Ref DBEndpoint
          DB_NAME: claimvision
      Events:
        GetRoomAPI:
          Type: Api
          Properties:
            Path: /claims/{claim_id}/rooms/{room_id}
            Method: GET
            RestApiId: !Ref ClaimVisionAPI
            Auth:
              Authorizer: JwtAuthorizer

  # Update Room Function
  UpdateRoomFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: rooms.update_room.lambda_handler
      Runtime: python3.12
      VpcConfig: !If 
        - HasVpc
        - SubnetIds: !Ref SubnetIds
          SecurityGroupIds: !Ref SecurityGroupIds
        - !Ref AWS::NoValue
      CodeUri: src/
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          DB_USERNAME: !Ref DBUsername
          DB_PASSWORD: !Ref DBPassword
          DB_HOST: !Ref DBEndpoint
          DB_NAME: claimvision
      Events:
        UpdateRoomAPI:
          Type: Api
          Properties:
            Path: /claims/{claim_id}/rooms/{room_id}
            Method: PUT
            RestApiId: !Ref ClaimVisionAPI
            Auth:
              Authorizer: JwtAuthorizer

  # Delete Room Function
  DeleteRoomFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: rooms.delete_room.lambda_handler
      Runtime: python3.12
      VpcConfig: !If 
        - HasVpc
        - SubnetIds: !Ref SubnetIds
          SecurityGroupIds: !Ref SecurityGroupIds
        - !Ref AWS::NoValue
      CodeUri: src/
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          DB_USERNAME: !Ref DBUsername
          DB_PASSWORD: !Ref DBPassword
          DB_HOST: !Ref DBEndpoint
          DB_NAME: claimvision
      Events:
        DeleteRoomAPI:
          Type: Api
          Properties:
            Path: /claims/{claim_id}/rooms/{room_id}
            Method: DELETE
            RestApiId: !Ref ClaimVisionAPI
            Auth:
              Authorizer: JwtAuthorizer

  ##Admin##
  # Get Users Function
  GetUsersFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: admin.get_users.lambda_handler
      Runtime: python3.12
      VpcConfig: !If 
        - HasVpc
        - SubnetIds: !Ref SubnetIds
          SecurityGroupIds: !Ref SecurityGroupIds
        - !Ref AWS::NoValue
      CodeUri: src/
      Role: !GetAtt LambdaExecutionRole.Arn
      Policies:
        - Statement:
            Effect: Allow
            Action:
              - cognito-idp:ListUsers # Allow listing users in Cognito
            Resource:
              - !Sub arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${CognitoUserPoolId}
        - AWSLambdaBasicExecutionRole
      Environment:
        Variables:
          DB_USERNAME: !Ref DBUsername
          DB_PASSWORD: !Ref DBPassword
          DB_HOST: !Ref DBEndpoint
          DB_NAME: claimvision
          COGNITO_USER_POOL_ID: !If
            - IsDev
            - !ImportValue CognitoUserPoolId-dev
            - !ImportValue CognitoUserPoolId-prod
      Events:
        GetUsersAPI:
          Type: Api
          Properties:
            Path: /admin/users
            Method: GET
            RestApiId: !Ref ClaimVisionAPI
            Auth:
              Authorizer: JwtAuthorizer

  # Update User Role Function
  UpdateUserRoleFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: admin.update_user_role.lambda_handler
      Runtime: python3.12
      VpcConfig: !If 
        - HasVpc
        - SubnetIds: !Ref SubnetIds
          SecurityGroupIds: !Ref SecurityGroupIds
        - !Ref AWS::NoValue
      CodeUri: src/
      Role: !GetAtt LambdaExecutionRole.Arn
      Policies:
        - Statement:
            Effect: Allow
            Action:
              - ssm:GetParameter
              - ssm:GetParameters
            Resource:
              - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${RDSEndpointSSMPath}
              - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${DBUsernameSSMPath}
              - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${DBPasswordSSMPath}
        - Statement:
            Effect: Allow
            Action:
              - cognito-idp:AdminAddUserToGroup
              - cognito-idp:AdminRemoveUserFromGroup
            Resource: !Sub arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${CognitoUserPoolId}
        - AWSLambdaBasicExecutionRole
      Environment:
        Variables:
          DB_USERNAME: !Ref DBUsername
          DB_PASSWORD: !Ref DBPassword
          DB_HOST: !Ref DBEndpoint
          DB_NAME: claimvision
          COGNITO_USER_POOL_ID: !Ref CognitoUserPoolId
      Events:
        UpdateUserRoleAPI:
          Type: Api
          Properties:
            Path: /admin/users/{username}/role
            Method: PUT
            RestApiId: !Ref ClaimVisionAPI
            Auth:
              Authorizer: JwtAuthorizer

  # Get Files Function (Paginated)
  GetFilesFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: files.get_files.lambda_handler
      Runtime: python3.12
      VpcConfig: !If 
        - HasVpc
        - SubnetIds: !Ref SubnetIds
          SecurityGroupIds: !Ref SecurityGroupIds
        - !Ref AWS::NoValue
      CodeUri: src/
      Role: !GetAtt LambdaExecutionRole.Arn
      Policies:
        - Statement:
            Effect: Allow
            Action:
              - ssm:GetParameter
              - ssm:GetParameters
            Resource:
              - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${RDSEndpointSSMPath}
              - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${DBUsernameSSMPath}
              - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${DBPasswordSSMPath}
        - AWSLambdaBasicExecutionRole
      Environment:
        Variables:
          S3_BUCKET_NAME: !Ref S3BucketName
          DB_USERNAME: !Ref DBUsername
          DB_PASSWORD: !Ref DBPassword
          DB_HOST: !Ref DBEndpoint
          DB_NAME: claimvision
      Events:
        GetFilesAPI:
          Type: Api
          Properties:
            Path: /files
            Method: GET
            RestApiId: !Ref ClaimVisionAPI
            Auth:
              Authorizer: JwtAuthorizer
        GetFilesByClaimAPI:
          Type: Api
          Properties:
            Path: /claims/{claim_id}/files
            Method: GET
            RestApiId: !Ref ClaimVisionAPI
            Auth:
              Authorizer: JwtAuthorizer

  # Get Single File Metadata Function
  GetFileFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: files.get_file.lambda_handler
      Runtime: python3.12
      VpcConfig: !If 
        - HasVpc
        - SubnetIds: !Ref SubnetIds
          SecurityGroupIds: !Ref SecurityGroupIds
        - !Ref AWS::NoValue
      CodeUri: src/
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
        - x86_64
      Policies:
        - Statement:
            Effect: Allow
            Action:
              - ssm:GetParameter
              - ssm:GetParameters
            Resource:
              - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/terraform/database/username
              - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/terraform/database/password
              - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${RDSEndpointSSMPath}
        - AWSLambdaBasicExecutionRole
      Environment:
        Variables:
          DB_USERNAME: !Ref DBUsername
          DB_PASSWORD: !Ref DBPassword
          DB_HOST: !Ref DBEndpoint
          DB_NAME: claimvision
          S3_BUCKET_NAME: !Ref S3BucketName
      Events:
        GetFileAPI:
          Type: Api
          Properties:
            Path: /files/{file_id}
            Method: GET
            RestApiId: !Ref ClaimVisionAPI
            Auth:
              Authorizer: JwtAuthorizer

  # Update File Metadata Function (PATCH)
  UpdateFileMetadataFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: files.update_file_metadata.lambda_handler
      Runtime: python3.12
      VpcConfig: !If 
        - HasVpc
        - SubnetIds: !Ref SubnetIds
          SecurityGroupIds: !Ref SecurityGroupIds
        - !Ref AWS::NoValue
      CodeUri: src/
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          DB_USERNAME: !Ref DBUsername
          DB_PASSWORD: !Ref DBPassword
          DB_HOST: !Ref DBEndpoint
          DB_NAME: claimvision
      Events:
        UpdateFileMetadataAPI:
          Type: Api
          Properties:
            Path: /files/{file_id}
            Method: PATCH
            RestApiId: !Ref ClaimVisionAPI
            Auth:
              Authorizer: JwtAuthorizer

  # Replace File Function (PUT)
  ReplaceFileFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: files.replace_file.lambda_handler
      Runtime: python3.12
      VpcConfig: !If 
        - HasVpc
        - SubnetIds: !Ref SubnetIds
          SecurityGroupIds: !Ref SecurityGroupIds
        - !Ref AWS::NoValue
      CodeUri: src/
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
        - x86_64
      Environment:
        Variables:
          DB_USERNAME: !Ref DBUsername
          DB_PASSWORD: !Ref DBPassword
          DB_HOST: !Ref DBEndpoint
          DB_NAME: claimvision
          S3_BUCKET_NAME: !Ref S3BucketName

      Events:
        ReplaceFileAPI:
          Type: Api
          Properties:
            Path: /files/{file_id}
            Method: PUT
            RestApiId: !Ref ClaimVisionAPI
            Auth:
              Authorizer: JwtAuthorizer

  # Delete File Function
  DeleteFileFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: files.delete_file.lambda_handler
      Runtime: python3.12
      VpcConfig: !If 
        - HasVpc
        - SubnetIds: !Ref SubnetIds
          SecurityGroupIds: !Ref SecurityGroupIds
        - !Ref AWS::NoValue
      CodeUri: src/
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
        - x86_64
      Environment:
        Variables:
          DB_USERNAME: !Ref DBUsername
          DB_PASSWORD: !Ref DBPassword
          DB_HOST: !Ref DBEndpoint
          DB_NAME: claimvision
          S3_BUCKET_NAME: !Ref S3BucketName
      Events:
        DeleteFileAPI:
          Type: Api
          Properties:
            Path: /files/{file_id}
            Method: DELETE
            RestApiId: !Ref ClaimVisionAPI
            Auth:
              Authorizer: JwtAuthorizer
    Policies:
      - AWSLambdaBasicExecutionRole
      - Statement:
          Effect: Allow
          Action:
            - ssm:GetParameter
            - ssm:GetParameters
          Resource:
            - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${RDSEndpointSSMPath}
            - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${DBUsernameSSMPath}
            - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${DBPasswordSSMPath}

  UploadFileFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: files.upload_file.lambda_handler
      Runtime: python3.12
      VpcConfig: !If 
        - HasVpc
        - SubnetIds: !Ref SubnetIds
          SecurityGroupIds: !Ref SecurityGroupIds
        - !Ref AWS::NoValue
      CodeUri: src/
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
        - x86_64
      Events:
        UploadFileByClaimAPI:
          Type: Api
          Properties:
            Path: /claims/{claim_id}/files/upload
            Method: POST
            RestApiId: !Ref ClaimVisionAPI
            Auth:
              Authorizer: JwtAuthorizer
      Environment:
        Variables:
          DB_USERNAME: !Ref DBUsername
          DB_PASSWORD: !Ref DBPassword
          DB_HOST: !Ref DBEndpoint
          DB_NAME: claimvision
          S3_BUCKET_NAME: !Ref S3BucketName
          SQS_UPLOAD_QUEUE_URL: !Ref FileUploadQueueURL
      Policies:
        - S3CrudPolicy:
            BucketName: !Sub claimvision-files-${AWS::AccountId}-${Env}
        - SQSSendMessagePolicy:
            QueueName: !Ref FileUploadQueueName
        - Statement:
            Effect: Allow
            Action:
              - sqs:SendMessage
              - sqs:GetQueueUrl
            Resource: !Ref FileUploadQueueARN

  ProcessFileFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: files.process_file.lambda_handler
      Runtime: python3.12
      VpcConfig: !If 
        - HasVpc
        - SubnetIds: !Ref SubnetIds
          SecurityGroupIds: !Ref SecurityGroupIds
        - !Ref AWS::NoValue
      CodeUri: src/
      Role: !GetAtt ProcessFileLambdaRole.Arn
      Architectures:
        - x86_64
      Events:
        SQSTrigger:
          Type: SQS
          Properties:
            Queue: !Ref FileUploadQueueARN
            BatchSize: 10
            MaximumBatchingWindowInSeconds: 30
      Environment:
        Variables:
          S3_BUCKET_NAME: !Ref S3BucketName
          SQS_ANALYSIS_QUEUE_URL: !Ref FileAnalysisQueueURL
          DB_USERNAME: !Ref DBUsername
          DB_PASSWORD: !Ref DBPassword
          DB_HOST: !Ref DBEndpoint
          DB_NAME: claimvision

  AnalyzeFileFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: files.analyze_file.lambda_handler
      Runtime: python3.12
      VpcConfig: !If 
        - HasVpc
        - SubnetIds: !Ref SubnetIds
          SecurityGroupIds: !Ref SecurityGroupIds
        - !Ref AWS::NoValue
      CodeUri: src/
      Role: !GetAtt AnalyzeFileLambdaRole.Arn
      Architectures:
        - x86_64
      Events:
        SQSTrigger:
          Type: SQS
          Properties:
            Queue: !Ref FileAnalysisQueueARN
            BatchSize: 5
            MaximumBatchingWindowInSeconds: 60
      Environment:
        Variables:
          S3_BUCKET_NAME: !Ref S3BucketName
          MIN_CONFIDENCE: '70.0'
          DB_USERNAME: !Ref DBUsername
          DB_PASSWORD: !Ref DBPassword
          DB_HOST: !Ref DBEndpoint
          DB_NAME: claimvision

  APICertificate:
    Type: AWS::CertificateManager::Certificate
    Condition: CreateDNS
    Properties:
      DomainName: !Ref ApiDomainName
      ValidationMethod: DNS
      DomainValidationOptions:
        - DomainName: !Ref ApiDomainName
          HostedZoneId: !Ref HostedZoneId

  APIDomainName:
    Type: AWS::ApiGateway::DomainName
    Condition: CreateDNS
    Properties:
      DomainName: !Ref ApiDomainName
      RegionalCertificateArn: !Ref APICertificate
      EndpointConfiguration:
        Types:
          - REGIONAL

  APIBasePathMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Condition: CreateDNS
    Properties:
      DomainName: !Ref APIDomainName
      RestApiId: !Ref ClaimVisionAPI
      Stage: !Ref ClaimVisionAPI.Stage
    DependsOn:
      - ClaimVisionAPI
      - APIDomainName

  APIDNSRecord:
    Type: AWS::Route53::RecordSet
    Condition: CreateDNS
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !Ref ApiDomainName
      Type: A
      AliasTarget:
        DNSName: !GetAtt APIDomainName.RegionalDomainName
        HostedZoneId: !GetAtt APIDomainName.RegionalHostedZoneId
        EvaluateTargetHealth: false

Outputs:
  #  Print API Gateway URL After Deployment
  ApiGatewayInvokeURL:
    Description: API Gateway Invoke URL
    Value: !Sub https://${ClaimVisionAPI}.execute-api.${AWS::Region}.amazonaws.com/dev
  CustomDomainURL:
    Condition: CreateDNS
    Description: Custom Domain URL
    Value: !Sub https://${ApiDomainName}