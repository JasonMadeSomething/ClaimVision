AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Globals:
  Function:
    Timeout: 10
    MemorySize: 128
    Environment:
      Variables:
        AWS_REGION: "us-east-1"
        COGNITO_USER_POOL_CLIENT_ID: !Ref CognitoUserPoolClient

Resources:
  # Cognito User Pool
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: ClaimVisionUserPool
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: true
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: false
      AutoVerifiedAttributes:
        - email

  # Cognito App Client
  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: ClaimVisionClient
      UserPoolId: !Ref CognitoUserPool
      GenerateSecret: false
      AllowedOAuthFlows:
        - implicit
      AllowedOAuthScopes:
        - email
        - openid
        - profile
      CallbackURLs:
        - "http://localhost:3000"  # Update with actual frontend URL
      LogoutURLs:
        - "http://localhost:3000"

  # Lambda function for user login
  LoginFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: auth.login.lambda_handler
      Runtime: python3.9
      CodeUri: src/auth/
      Policies:
        - AWSLambdaBasicExecutionRole
      Events:
        LoginAPI:
          Type: Api
          Properties:
            Path: /auth/login
            Method: POST
            RestApiId: !Ref ClaimVisionAPI
            Cors:
              AllowMethods: "'OPTIONS,POST'"
              AllowHeaders: "'Content-Type,Authorization'"
              AllowOrigin: "'*'"

  # API Gateway for ClaimVision
  ClaimVisionAPI:
    Type: AWS::Serverless::Api
    Properties:
      Name: ClaimVisionAPI
      StageName: dev
      Cors:
        AllowMethods: "'OPTIONS,POST,GET'"
        AllowHeaders: "'Content-Type,Authorization'"
        AllowOrigin: "'*'"
