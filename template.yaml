AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Parameters:
  Env:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - prod
    Description: 'Specify the environment: dev or prod'
  CognitoUserPoolId:
    Type: String
    Description: "The Cognito User Pool ID from the external stack"

Conditions:
  IsDev: !Equals [!Ref Env, "dev"]


Mappings:
  CognitoExports:
    dev:
      UserPoolId: CognitoUserPoolId-dev
    prod:
      UserPoolId: CognitoUserPoolId-prod

Globals:
  Function:
    Timeout: 10
    MemorySize: 128
    Runtime: python3.12
    Environment:
      Variables:
        COGNITO_USER_POOL_CLIENT_ID: !If
          - IsDev
          - !ImportValue CognitoUserPoolClientId-dev
          - !ImportValue CognitoUserPoolClientId-prod
        COGNITO_USER_POOL_ID: !If
          - IsDev
          - !ImportValue CognitoUserPoolId-dev
          - !ImportValue CognitoUserPoolId-prod

Resources:

  ####Tables####
  # Claims
  ClaimsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "ClaimsTable-${Env}"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id  # ✅ Primary Key
          AttributeType: S
        - AttributeName: user_id  # ✅ Secondary Index (GlobalSecondaryIndexes uses this)
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH  # ✅ The main partition key
      GlobalSecondaryIndexes:
        - IndexName: UserIdIndex
          KeySchema:
            - AttributeName: user_id
              KeyType: HASH
          Projection:
            ProjectionType: ALL

  # Files
  FilesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "FilesTable-${Env}"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: user_id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: UserIdIndex
          KeySchema:
            - AttributeName: user_id
              KeyType: HASH
          Projection:
            ProjectionType: ALL

  ###S3###
  # Files Bucket
  ClaimVisionBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "claimvision-files-${AWS::AccountId}-${Env}"

  # User Pool ID
  UserPoolId:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !FindInMap [CognitoExports, !Ref Env, UserPoolId]
      Type: String
      Value: !ImportValue
        Fn::FindInMap: [CognitoExports, !Ref Env, UserPoolId]

  ###API###
  # API Gateway
  ClaimVisionAPI:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub "ClaimVisionAPI-${Env}"
      StageName: dev
      Cors:
        AllowMethods: "'OPTIONS,POST,GET'"
        AllowHeaders: "'Content-Type,Authorization'"
        AllowOrigin: "'*'"
      Auth:
        Authorizers:
          CognitoAuthorizer:
            UserPoolId: !Ref CognitoUserPoolId
            UserPoolArn: !Sub "arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${CognitoUserPoolId}"
            IdentitySource: method.request.header.Authorization

  ###Lambdas###
  ##Auth##
  # Login Function
  LoginFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: auth.login.lambda_handler
      Runtime: python3.12
      CodeUri: src/
      Policies:
        - AWSLambdaBasicExecutionRole
      Events:
        LoginAPI:
          Type: Api
          Properties:
            Path: /auth/login
            Method: POST
            RestApiId: !Ref ClaimVisionAPI # No Auth here!

  # Register Function
  RegisterFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: auth.register.lambda_handler
      Runtime: python3.12
      CodeUri: src/
      Policies:
        - AWSLambdaBasicExecutionRole
      Events:
        RegisterAPI:
          Type: Api
          Properties:
            Path: /auth/register
            Method: POST
            RestApiId: !Ref ClaimVisionAPI 
  # Confirm Email
  ConfirmFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: auth.confirm.lambda_handler
      Runtime: python3.12
      CodeUri: src/
      Policies:
        - AWSLambdaBasicExecutionRole
      Events:
        ConfirmAPI:
          Type: Api
          Properties:
            Path: /auth/confirm
            Method: POST
            RestApiId: !Ref ClaimVisionAPI
  # Resend Email Verification
  ResendConfirmationFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: auth.resend_confirmation.lambda_handler
      Runtime: python3.12
      CodeUri: src/
      Policies:
        - AWSLambdaBasicExecutionRole
      Events:
        ResendConfirmationAPI:
          Type: Api
          Properties:
            Path: /auth/resend-confirmation
            Method: POST
            RestApiId: !Ref ClaimVisionAPI
  # Dev bypass email verification
  PreSignUpFunction:
    Type: AWS::Serverless::Function
    Condition: IsDev
    Properties:
      Handler: auth.pre_signup.lambda_handler
      Runtime: python3.12
      CodeUri: src/
      Policies:
        - AWSLambdaBasicExecutionRole

  # Get Claims Function
  GetClaimsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: claims.get_claims.lambda_handler  # ✅ Dedicated GET handler
      Runtime: python3.12
      CodeUri: src/
      Policies:
        - AWSLambdaBasicExecutionRole
        - Statement:
            Effect: Allow
            Action:
              - dynamodb:Query  # ✅ Fetch all claims for user
              - dynamodb:GetItem  # ✅ Fetch specific claims
            Resource:
              - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/ClaimsTable-${Env}"
              - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/ClaimsTable-${Env}/index/UserIdIndex"
      Environment:
        Variables:
          CLAIMS_TABLE: !Ref ClaimsTable
      Events:
        GetClaimsAPI:
          Type: Api
          Properties:
            Path: /claims
            Method: GET
            RestApiId: !Ref ClaimVisionAPI
            Auth:
              Authorizer: CognitoAuthorizer
        GetClaimAPI:
          Type: Api
          Properties:
            Path: /claims/{id}
            Method: GET
            RestApiId: !Ref ClaimVisionAPI
            Auth:
              Authorizer: CognitoAuthorizer
  
  # Claims CRUD Function
  ModifyClaimFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: claims.modify_claims.lambda_handler  # ✅ Dedicated CRUD handler
      Runtime: python3.12
      CodeUri: src/
      Policies:
        - AWSLambdaBasicExecutionRole
        - AWSLambdaDynamoDBExecutionRole  # ✅ Full CRUD permissions for claims
        - Statement:
            Effect: Allow
            Action:
              - dynamodb:PutItem  # ✅ Create claims
              - dynamodb:GetItem  # ✅ Read claims
              - dynamodb:UpdateItem  # ✅ Modify claims
              - dynamodb:DeleteItem  # ✅ Remove claims
            Resource:
              - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/ClaimsTable-${Env}"
      Environment:
        Variables:
          CLAIMS_TABLE: !Ref ClaimsTable
      Events:
        CreateClaimAPI:
          Type: Api
          Properties:
            Path: /claims
            Method: POST
            RestApiId: !Ref ClaimVisionAPI
            Auth:
              Authorizer: CognitoAuthorizer
        UpdateClaimAPI:
          Type: Api
          Properties:
            Path: /claims/{id}
            Method: PUT
            RestApiId: !Ref ClaimVisionAPI
            Auth:
              Authorizer: CognitoAuthorizer
        DeleteClaimAPI:
          Type: Api
          Properties:
            Path: /claims/{id}
            Method: DELETE
            RestApiId: !Ref ClaimVisionAPI
            Auth:
              Authorizer: CognitoAuthorizer

  ##Admin##
  # Get Users Function
  GetUsersFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: admin.get_users.lambda_handler
      Runtime: python3.12
      CodeUri: src/
      Policies:
        - AWSLambdaBasicExecutionRole
        - Statement:
            Effect: Allow
            Action:
              - cognito-idp:ListUsers  # ✅ Allow listing users in Cognito
            Resource: 
              - !Sub "arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${CognitoUserPoolId}"
      Environment:
        Variables:
          COGNITO_USER_POOL_ID: !Ref CognitoUserPoolId  # ✅ Fix reference issue
      Events:
        GetUsersAPI:
          Type: Api
          Properties:
            Path: /admin/users
            Method: GET
            RestApiId: !Ref ClaimVisionAPI
            Auth:
              Authorizer: CognitoAuthorizer
    # Update User Role Function      
  UpdateUserRoleFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: admin.update_user_role.lambda_handler
      Runtime: python3.12
      CodeUri: src/
      Policies:
        - AWSLambdaBasicExecutionRole
        - Statement:
            Effect: Allow
            Action:
              - cognito-idp:AdminAddUserToGroup
              - cognito-idp:AdminRemoveUserFromGroup
            Resource: !Sub "arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${CognitoUserPoolId}"
      Environment:
        Variables:
          COGNITO_USER_POOL_ID: !Ref CognitoUserPoolId
      Events:
        UpdateUserRoleAPI:
          Type: Api
          Properties:
            Path: /admin/users/{username}/role
            Method: PUT
            RestApiId: !Ref ClaimVisionAPI
            Auth:
              Authorizer: CognitoAuthorizer

##Files##
  # Upload File Function
  UploadFileFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: files.upload_file.lambda_handler
      Runtime: python3.12
      CodeUri: src/
      Policies:
        - AWSLambdaBasicExecutionRole
        - Statement:
            Effect: Allow
            Action:
              - s3:PutObject
            Resource: !Sub "arn:aws:s3:::claimvision-files-${AWS::AccountId}-${Env}/*"
        - Statement:
            Effect: Allow
            Action:
              - dynamodb:PutItem
            Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/FilesTable-${Env}"
      Environment:
        Variables:
          S3_BUCKET_NAME: !Ref ClaimVisionBucket
          FILES_TABLE: !Ref FilesTable
      Events:
        UploadFileAPI:
          Type: Api
          Properties:
            Path: /files/upload
            Method: POST
            RestApiId: !Ref ClaimVisionAPI
            Auth:
              Authorizer: CognitoAuthorizer

  # Get Files Function (Paginated)
  GetFilesFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: files.get_files.lambda_handler
      Runtime: python3.12
      CodeUri: src/
      Policies:
        - AWSLambdaBasicExecutionRole
        - Statement:
            Effect: Allow
            Action:
              - dynamodb:Query
            Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/FilesTable-${Env}/index/UserIdIndex"
      Environment:
        Variables:
          FILES_TABLE: !Ref FilesTable
      Events:
        GetFilesAPI:
          Type: Api
          Properties:
            Path: /files
            Method: GET
            RestApiId: !Ref ClaimVisionAPI
            Auth:
              Authorizer: CognitoAuthorizer

  # Get Single File Metadata Function
  GetFileFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: files.get_file.lambda_handler
      Runtime: python3.12
      CodeUri: src/
      Policies:
        - AWSLambdaBasicExecutionRole
        - Statement:
            Effect: Allow
            Action:
              - dynamodb:GetItem
            Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/FilesTable-${Env}"
      Environment:
        Variables:
          FILES_TABLE: !Ref FilesTable
      Events:
        GetFileAPI:
          Type: Api
          Properties:
            Path: /files/{id}
            Method: GET
            RestApiId: !Ref ClaimVisionAPI
            Auth:
              Authorizer: CognitoAuthorizer

  # Update File Metadata Function (PATCH)
  UpdateFileMetadataFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: files.update_file_metadata.lambda_handler
      Runtime: python3.12
      CodeUri: src/
      Policies:
        - AWSLambdaBasicExecutionRole
        - Statement:
            Effect: Allow
            Action:
              - dynamodb:UpdateItem
              - dynamodb:GetItem
            Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/FilesTable-${Env}"
      Environment:
        Variables:
          FILES_TABLE: !Ref FilesTable
      Events:
        UpdateFileMetadataAPI:
          Type: Api
          Properties:
            Path: /files/{id}
            Method: PATCH
            RestApiId: !Ref ClaimVisionAPI
            Auth:
              Authorizer: CognitoAuthorizer

  # Replace File Function (PUT)
  ReplaceFileFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: files.replace_file.lambda_handler
      Runtime: python3.12
      CodeUri: src/
      Policies:
        - AWSLambdaBasicExecutionRole
        - Statement:
            Effect: Allow
            Action:
              - s3:PutObject
            Resource: !Sub "arn:aws:s3:::claimvision-files-${AWS::AccountId}-${Env}/*"
        - Statement:
            Effect: Allow
            Action:
              - dynamodb:UpdateItem
              - dynamodb:GetItem
            Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/FilesTable-${Env}"
      Environment:
        Variables:
          FILES_TABLE: !Ref FilesTable
          S3_BUCKET_NAME: !Ref ClaimVisionBucket
      Events:
        ReplaceFileAPI:
          Type: Api
          Properties:
            Path: /files/{id}
            Method: PUT
            RestApiId: !Ref ClaimVisionAPI
            Auth:
              Authorizer: CognitoAuthorizer

  # Delete File Function
  DeleteFileFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: files.delete_file.lambda_handler
      Runtime: python3.12
      CodeUri: src/
      Policies:
        - AWSLambdaBasicExecutionRole
        - Statement:
            Effect: Allow
            Action:
              - s3:GetObject
              - s3:DeleteObject
            Resource: !Sub "arn:aws:s3:::claimvision-files-${AWS::AccountId}-${Env}/*"
        - Statement:
            Effect: Allow
            Action:
              - dynamodb:GetItem
              - dynamodb:DeleteItem
            Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/FilesTable-${Env}"
      Environment:
        Variables:
          FILES_TABLE: !Ref FilesTable
          S3_BUCKET_NAME: !Ref ClaimVisionBucket
      Events:
        DeleteFileAPI:
          Type: Api
          Properties:
            Path: /files/{id}
            Method: DELETE
            RestApiId: !Ref ClaimVisionAPI
            Auth:
              Authorizer: CognitoAuthorizer


Outputs:
  #  Print API Gateway URL After Deployment
  ApiGatewayInvokeURL:
    Description: API Gateway Invoke URL
    Value: !Sub https://${ClaimVisionAPI}.execute-api.${AWS::Region}.amazonaws.com/dev
  ClaimVisionBucketName:
    Description: "The S3 Bucket for storing claim-related files"
    Value: !Ref ClaimVisionBucket
    Export:
      Name: "ClaimVisionBucketName"